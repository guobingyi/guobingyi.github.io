<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Do it on guobingyi</title>
    <link>https://guobingyi.github.io/</link>
    <description>Recent content in Just Do it on guobingyi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Aug 2018 09:00:19 +0800</lastBuildDate>
    
	<atom:link href="https://guobingyi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>健康</title>
      <link>https://guobingyi.github.io/life/health/</link>
      <pubDate>Tue, 07 Aug 2018 09:00:19 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/life/health/</guid>
      <description> 自己的健康问题  如果不是生死问题，所有的问题都是小问题。
 肾结石 从来都没有想到过自己会得这样的病，但是还是得了。
下面是医生开的结石药：
 热淋清颗粒  疗效我感觉就是在尿血的时候喝，到底起不起用不知道，反正吃了好多盒，石头依然在。
 舒泌通胶囊  打石药，也是吃了好多盒，石头依然在。
 结石通胶囊  打石药，和上面差不多，或许是因为上面的不起作用，换这种的吧，好几盒，石头依然在。
糖尿病  阿卡波糖片   骨化三醇胶丸   盐酸二甲双胍片   碳酸钙D3片   门冬胰岛素  </description>
    </item>
    
    <item>
      <title>GameOfThrones</title>
      <link>https://guobingyi.github.io/blog/gameofthrones/</link>
      <pubDate>Sat, 04 Aug 2018 15:20:33 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/gameofthrones/</guid>
      <description>冰与火之歌  很早的时候就有人推荐给我看，但是我一直都沉迷在《行尸走肉》中。觉得美剧中，没有比《行尸走肉》更好看的了。其实，我错了，大错特错。
 0x00 第一季 从第一季就被鸿达的场面所吸引了，在此之前，我在看《天行健》这本书，也是感觉不错。但是还是被《冰与火之歌》吸引了。</description>
    </item>
    
    <item>
      <title>Centos7搭建ftp服务</title>
      <link>https://guobingyi.github.io/blog/centos7%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 27 Jul 2018 09:42:51 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/centos7%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1/</guid>
      <description>Centos7 搭建ftp服务  其实，我需求的很简单，你别讲的那么复杂。
 第一次在centos7下搭建ftp服务，原来在redhat下搭建过，但是忘记了怎么搭建了。尴尬了，所以就重头开始。我的需求很简单，就是一个ftp服务，去掉匿名登录后，有个用户和密码，能将文件放到上面就完了。好了，需求有了，我用百度搜了“centos7 ftp服务搭建”，一大堆网页跑出了，我选择了一些常用的地方，比如csdn,博客园，红黑联盟。但是非常失望，没有一个地方可以很清楚的讲解清楚，如果照着页面上的做，那么可能会进入一个死结，但是文章中又没有提到该怎么解，反正人家是成功的，你的就不成功。郁闷！这就陷入另外的一个处境，你不得不尝试其他文章的方法，这样一折腾，一个早上，或者一天就结束了。希望我能在这里将我遇到的坑，和怎么解决的方法告诉大家，避免走弯路。
0x00 安装vsftpd 如果centos下没有安装vsftpd，那么就你就直接安装:
yum install vsftpd  如果安装了，那么就直接卸载了。
yum remove vsftpd  卸载后需要注意以下问题：
 查看线程是否存在  ps auxf | grep vsftpd  如果线程存在则直接 kill -9 .
 如果/etc/vsftpd文件夹存在，先删除在重新安装。  即：在重新安装前，全部vsftpd的线程不存在，文件夹为最新。
0x01 配置信息 ftp服务的配置信息路径为：
/etc/vsftpd/vsftpd.conf  一般对照配置修改以下内容：
#禁用匿名用户登录 anonymous_enable=NO #是否允许本地用户登录 chroot_local_user=YES #ftp根目录 local_root=/ftpserver/flowdata  0x02 创建本地用户  创建ftp用户  useradd jack   设置用户密码  echo &amp;quot;jack_pass_word&amp;quot; | passwd jack --stdin  3.限制该用户仅能通过 FTP 访问</description>
    </item>
    
    <item>
      <title>Anon</title>
      <link>https://guobingyi.github.io/blog/anon/</link>
      <pubDate>Sat, 14 Jul 2018 16:46:13 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/anon/</guid>
      <description>匿名者  What you look for every day of your life.Why you&amp;rsquo;ll never understand.It&amp;rsquo;s not that I have something to hide&amp;hellip; I hava nothing I want you to see.
 最近看了一部电影《匿名者》。
刚刚开始看的时候，还是被影片中的电脑特技给征服了。看到这种通过眼睛来进行扫描人员信息的时候，还是联想到了谷歌的glass。但是唯一的区别在于谷歌glass是可以摘下来的，而电影里的是每个人都被种植到了眼睛了，并且不能被摘除。如果被入侵了，那么人就瞎了。而且所谓的记忆，也会被删除。
不可否认，这样将主动权都交给了电脑，会提高相对的安全。但是，更多的是不安全。所以，电影里的女主角才启动了隐藏算法。越是绝对的控制，越是不安全。
隐私问题也是一个非常大的问题。现在人们越来越注重个人隐私。但是，在电影中，统治者将所有人的隐私进行统一管理，警察可以查看每个人的隐私，当然hacker也可以。就是说，我们的隐私被放到服务器上，有权限的人都可以看到。想想都恐怖，如果人没有了隐私，是不是社会会更安全。
在推特上也看到，现在社会中使用脸部采集，每个人去过什么地方，都会被该地方的监控录入，然后进行分析。就是说，如果你没有做什么，或者没有人来调用监控，那么你的隐私是安全的。但是如果有人调用了，那么你就没有什么所谓的隐私可言。
对于隐私来说，应该是双刃剑。用的好，可以造福人类，用的不好，也可以危害人类。电影中的去除影像技术，就是给犯罪人员逃脱法律制裁。而犯罪的依据有通过个人的视角来评定。所以，从电影中看出，这个系统是存在非常大的严重bug的。
结论就是，任何技术，任何规则，都不能摆脱人性。人之初，性本善。突然想到了《僵尸世界大战》上的13人原则，当12个人都同意的时候，必须有1个人来推翻12人。没有绝对的东西，事物都是两面性的。
害怕，将来会有这么一天。虽然是写代码的，但是也不能将所有的东西都交于代码。或许，有种说法叫返璞归真。太过于依赖技术，不如不用技术。我一直相信，科技只能听命于人类，而非让科技来主动指导人类。太多，太多的科幻片，都直奔主题，说科技导致了人类毁灭。但是，我觉得，《匿名者》这部电影，隐晦的道出了这个道理。而这种技术，离我们却又那么近。</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://guobingyi.github.io/blog/kafka/</link>
      <pubDate>Fri, 13 Jul 2018 19:46:58 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/kafka/</guid>
      <description>学习kafka  学习技术的过程中，我慢慢习惯去官网看看，不管学习什么。从什么时候开始，当我听说，别人讲给的听的感觉，就像人吃东西，然后在喂给你的时候。听着非常恶心。从营养角度来说，吃被人吐出来的东西，营养已经被消化了一部分。
 0x00 开始 kafka的官网 http://kafka.apache.org/  什么是kafka Apache Kafka是由Apache软件基金会开发的一个开源消息系统项目，由Scala写成。Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。 Kafka是一个分布式的、分区的、多复本的日志提交服务。它通过一种独一无二的设计提供了一个消息系统的功能。
0x01 kafka常用命令 注意
 &amp;amp;保证在关闭shell窗口后能继续运行
 在windows下将.sh改为.bat,“/”改为“\”
  开启ZooKeeper bin/zookeeper-server-start.sh config/zookeeper.properties &amp;amp;  开启kafka服务 bin/kafka-server-start.sh config/server.properties &amp;amp;  创建一个主题 bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test  列举主题 bin/kafka-topics.sh --list --zookeeper localhost:2181  发送消息  向主题为test的发送消息，输入字符后回车。  bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test   启动消费者  &amp;ndash;from-beginning 是从开始获取，可以不用该选项，直接从实时消息体获取信息。  bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning  启动kafka时需要配置的信息  在server.</description>
    </item>
    
    <item>
      <title>begin start learn c language</title>
      <link>https://guobingyi.github.io/blog/begin-start-learn-c-language/</link>
      <pubDate>Mon, 09 Jul 2018 09:18:07 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/begin-start-learn-c-language/</guid>
      <description> C学习笔记  c语言是大学里的入门语言，时隔十多年后，又开始学习。
 0x00 工具 工欲善其事必先利其器。
调试工具 在苹果电脑上直接使用gdb进行调试会存在一定的问题。所以最好的调试环境还是放到了docker上，或者直接使用了vs code 进行调试。因为这种那种的原因，所以最终还是决定使用vs code 进行ide。
 gdb调试
 在苹果系统中gdb调试各种不爽，sudo后也有其他问题；代码签名也有问题。反正就是苹果系统不推荐你使用就行了，别折腾太伤。本来是学习c语言的，绕了一大圈发现会在max os上使用gdb了。
 lldb调试
 苹果系统上推荐使用lldb进行调试c语言。所以想在mac os上调试，就用它吧，别和自己过不去。
IDE  Visual studio code
 微软推出的，免费。
 emacs
 这个不用说了吧，神器。但是，很难！
make  用过ant的都知道，ant是学习make写的。
 要想真正的了解make，还是在于读一遍文档吧。
https://www.gnu.org/software/make/manual/make.pdf  在读一遍陈浩大神的makefile教程。
https://blog.csdn.net/haoel/article/details/2886  这个地址将陈浩大神的帖子整理了一下。
https://blog.csdn.net/weixin_38391755/article/details/80380786  </description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>https://guobingyi.github.io/code/ruby/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:56 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/ruby/</guid>
      <description> Ruby 学习笔记 </description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://guobingyi.github.io/code/go/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:20 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/go/</guid>
      <description> go语言学习笔记 </description>
    </item>
    
    <item>
      <title>初探Shell</title>
      <link>https://guobingyi.github.io/blog/%E5%88%9D%E6%8E%A2shell/</link>
      <pubDate>Wed, 04 Jul 2018 19:54:52 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/%E5%88%9D%E6%8E%A2shell/</guid>
      <description>You got to put the past behind you before you can move on.
 由于项目上的需要开始接触shell，其实shell早就有过接触，只不过这次接触了，深入的思考了。
0x00 为什么用shell? 原来学习一门语言的时候都会这样问自己？但是大多数的答案都是：项目上需要。没有思考的余地，也就没有深入的思考。
现在开始用到，也学习了python,ruby,swift,javascript后发现，shell有她自身更好的发挥余地。比如我们经常会使用的命令cd,hugo server,git add -A等。别小看这些命令，一个一个来，还是要输入一会的。程序员不就图个安逸，一个shell脚本搞定的事情，为什么要多来输入几次呢？在举个例子，如果终端只有一个，那么要看tomcat的日志，还要更新类，那么就会来回的路径下切换，如果不用文本记录下来，光敲路径就花费很长的时间，so，用个shell脚本就可以解决了。当然，这个例子也不能说明shell的强大之处，那么这个例子就是shell的重要用途了。在零部署的时候，需要安装一些组件，数据库，初始化数据库脚本，注册服务，启动服务，关机。整个流程可以说一气呵成，但是如果是人工的话，那么想想工作量也是吓人的，这还不包括部署多台服务器呢。
如果是安装系统，会非常喜欢ghost版本，安装就step by step。而shell就提供了这样功能。当然有人会说python也一样搞定。是的，不可否认，但是如果python自身也需要安装库呢？所以，shell独天得厚的优势在于系统自带的同时，还可以自动安装所需的命令。
结论就是：如果你需要将命令step by step执行，那么就选择shell吧。
0x01 Hello,World! 每个学习程序设计的开始都会是这个，也因为这个才从此入坑。
创建文件hello.sh,输入一下内容：
#!/bin/bash echo &#39;Hello.World!&#39;  在终端中使用sh hello.sh,将输出以下结果：
Hello,World!  恭喜你，入门了。
思考：
 为什么第一行会有个#!/bin/bash echo 可以用单引号，也可以用双引号，区别是什么？ 如果要让shell脚步可以直接运行，怎么做？ 如何文件后缀是php,那么有该如何做呢？  0x02 变量 shell的变量命令基本和常用语言(pythoh/ruby/java/go)基本差不多，目前还没有遇到过坑。
那么如何定义一个变量呢？ someone=&amp;quot;Lee&amp;quot; some_two=&amp;quot;http://10.10.10.222&amp;quot;  看似简单的定义变量，如果写多了程序，就会有个问题，如下：
someone = &amp;quot;Lee&amp;quot; #Eroor  为什么会有这个错误，因为写代码的时候都喜欢来个空格，这样看着顺眼些，但是在shell里是错误的。因为变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
重要的事情说三遍，你要知道调试shell，就像java里System.out.println(&amp;ldquo;ok&amp;rdquo;)一样麻烦，更何况shell木有断点功能。目前我还不知道shell的ide，或者打断点，如果你知道，请告诉我，让我试试。
使用变量 $someone $(some_two)  只读变量 readonly someone  删除变量 unset someone  0x03 字符串 单引号 someone=&#39;Lee&#39;   单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</description>
    </item>
    
    <item>
      <title>倚天屠龙记读后感</title>
      <link>https://guobingyi.github.io/blog/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Sun, 24 Jun 2018 22:11:31 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>个性，决定了一个人未来能走多远。
 金庸的小说一直都是自己喜欢的。从高中开始，读的第一本书是《鹿鼎记》，那个时候是老师要求读的，原来都不知道有金庸这个人。从此一发不可收拾，开始追读金庸的小说。到大学的时候，由于金庸的小说有限，所以一直省着读。工作后，读了《笑傲江湖》，近期读了《倚天屠龙记》。
张无忌这个人的角色，开始就是一个悲情的角色。让人从开始就非常心疼他，关心他。正所谓，天无绝人之路，掉进山洞，学到了九阳真经。治好了自己体内的玄冰之毒，而且也学到了上乘武功。从这里开始，大家都觉得应该是登山人生巅峰。可是，如果这样小说就没有太多意义了。人性贯穿到金庸的小说中，都是宣扬着“正气”，而要突出这些“正气”，就要从多个方面来说明。真善美，假恶臭。在小说中，这几个人被刻画的非常形象生动。
 张三丰  张三丰，一个小和尚，自己开创了武当门派。或许，也只有大师才能有如此的造诣。对待生活的态度，不是一板一拍；对待世间的事，也不是循规蹈矩。当然，武功上的造诣，更是独自悟道，发明了太极心法。
 谢逊  爱恨分明，敢作敢当。对家人的爱，超出你的想象。聪明，不是说出来的。
 小昭  如果说要和张无忌比惨的话，小昭算一个。能这样忍辱负重，并最后实现人生目标的人，真的，厉害。
 周芷若  我竟然自己想到了周芷若的剧情，想她应该是前朝皇帝的女儿才这样希望张无忌能掌管大权的。其实，我真的想多了。
 赵敏  手段不是一般的厉害，和张无忌的妈妈有得一拼。因为电影了，演员是同一个赵敏，所以这两个角色真是难分，同时也感慨张敏的演的真好。
在小说中，每个人物都刻画的非常深刻。或许也只有金庸才能将这些人物写的那么鲜活。</description>
    </item>
    
    <item>
      <title>Think</title>
      <link>https://guobingyi.github.io/blog/think/</link>
      <pubDate>Fri, 22 Jun 2018 09:41:18 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/think/</guid>
      <description> 想法很多  自从没有在游戏上花费太多的时间，现在想法也很多。
 1.用hugo搭建自己的博客 现在已经使用了，但是感觉样式不怎么好看，慢慢在来改了。
不管怎么说，一切的开始，虽然难，但是都在前进就好！
2.用docker中的centos来搭建开发环境 因为自己的系统是macos，所以很多代码不一定能跑起来，比如dbdk。所以就想用docker的方式来搭建一个开放平台，这样即使换了电脑或则系统，都可以使用docker把镜像导入进来。思路而已，还要考虑的问题如下：
 如何将镜像进行备份和同步；   初步的想法是docker将镜像导出，然后git到github上进行存储。但是这些都是需要压缩和加密的。
 如何将实体机的开发环境弱化；   目前的开发环境都在本机的实体机上，所以想要弱化就必须考虑到一些开发ide，比如java的eclipse。想到用eclipse che来替代，就看docker是否能支持的好了。
3.尝试着写本书 这个就是一个伏笔了，希望能带来惊喜。当然，这个仅仅是生活的一部分，如果依赖就抱有太大的希望，就太给自己压力了。
先学着写吧。
4.科技改变生活 我觉得先从自己的生活改变开始，让自己的工作效率更高。为了达到这边目标，先从以下几点做起：
 使用shell脚本，将自己常用的命令进行一个封装； 将一些程序中经常使用的工具进行汇总，供shell脚本使用； 自己编写代码，提供没有的工具。  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://guobingyi.github.io/about/</link>
      <pubDate>Fri, 22 Jun 2018 09:36:13 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/about/</guid>
      <description>别人笑我太疯癫，我笑他人看不穿。
技能
 Java golang python ruby c/c++  </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://guobingyi.github.io/contact/</link>
      <pubDate>Fri, 22 Jun 2018 09:23:35 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/contact/</guid>
      <description>怎么联系我，邮箱吧！
但是，不一定回。 ：）</description>
    </item>
    
    <item>
      <title>Think</title>
      <link>https://guobingyi.github.io/post/think/</link>
      <pubDate>Thu, 21 Jun 2018 18:52:37 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/think/</guid>
      <description> 想法很多  自从没有在游戏上花费太多的时间，现在想法也很多。
 1.用hugo搭建自己的博客 现在已经使用了，但是感觉样式不怎么好看，慢慢在来改了。
不管怎么说，一切的开始，虽然难，但是都在前进就好！
2.用docker中的centos来搭建开发环境 因为自己的系统是macos，所以很多代码不一定能跑起来，比如dbdk。所以就想用docker的方式来搭建一个开放平台，这样即使换了电脑或则系统，都可以使用docker把镜像导入进来。思路而已，还要考虑的问题如下：
 如何将镜像进行备份和同步；   初步的想法是docker将镜像导出，然后git到github上进行存储。但是这些都是需要压缩和加密的。
 如何将实体机的开发环境弱化；   目前的开发环境都在本机的实体机上，所以想要弱化就必须考虑到一些开发ide，比如java的eclipse。想到用eclipse che来替代，就看docker是否能支持的好了。
3.尝试着写本书 这个就是一个伏笔了，希望能带来惊喜。当然，这个仅仅是生活的一部分，如果依赖就抱有太大的希望，就太给自己压力了。
先学着写吧。
4.科技改变生活 我觉得先从自己的生活改变开始，让自己的工作效率更高。为了达到这边目标，先从以下几点做起：
 使用shell脚本，将自己常用的命令进行一个封装； 将一些程序中经常使用的工具进行汇总，供shell脚本使用； 自己编写代码，提供没有的工具。  </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://guobingyi.github.io/about_old/</link>
      <pubDate>Tue, 19 Jun 2018 22:28:42 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/about_old/</guid>
      <description> 别人笑我太疯癫，我笑他人看不穿。
 喜欢程序设计，致力于将终身奉献给程序设计。
 talk is cheap,show me the code!  </description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://guobingyi.github.io/post/config/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:56 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/config/</guid>
      <description>看一下hugo的配置  当初觉得为什么hugo可以比beego那么多star,现在可以理解了。
 因为用go开发web的人，没有使用hugo创建自己博客的多。
来一个图片的例子：</description>
    </item>
    
    <item>
      <title>One</title>
      <link>https://guobingyi.github.io/post/one/</link>
      <pubDate>Fri, 15 Jun 2018 23:50:17 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/one/</guid>
      <description>测试为什么图像没有  原来都有的，现在没有？
 我觉得就是哪里配置的问题。
** 粗体 **</description>
    </item>
    
    <item>
      <title>Good</title>
      <link>https://guobingyi.github.io/post/good/</link>
      <pubDate>Fri, 15 Jun 2018 23:45:20 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/good/</guid>
      <description> 测试一下中文是否支持 </description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://guobingyi.github.io/post/test/</link>
      <pubDate>Fri, 15 Jun 2018 23:31:47 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/test/</guid>
      <description> Test my blog  new day will come,wzry go away!
 </description>
    </item>
    
    <item>
      <title>Newday</title>
      <link>https://guobingyi.github.io/post/newday/</link>
      <pubDate>Fri, 15 Jun 2018 23:30:41 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/newday/</guid>
      <description> Hello,Hugo! </description>
    </item>
    
  </channel>
</rss>