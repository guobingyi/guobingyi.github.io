<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Do it on guobingyi</title>
    <link>https://guobingyi.github.io/</link>
    <description>Recent content in Just Do it on guobingyi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Nov 2018 11:22:28 +0800</lastBuildDate>
    
	<atom:link href="https://guobingyi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Brew</title>
      <link>https://guobingyi.github.io/blog/brew/</link>
      <pubDate>Thu, 08 Nov 2018 11:22:28 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/brew/</guid>
      <description>brew 使用指南  自从用了brew，就在也不想离开mac系统了。
0x00安装brew 访问brew官网https://brew.sh，根据提示进行安装。
 /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  0x01使用brew安装软件 brew install wget  0x02使用brew更新软件 brew update  更新使用brew安装的软件
0x03使用brew执行更新 brew upgrade  所以，一般都使用组合命令进行执行
brew update &amp;amp;&amp;amp; brew upgrade  0x04 使用cleanup执行删除老更新包 brew cleanup  0x05 cask下的安装与删除 安装
brew cask install name  卸载
brew cask uninstall name  0x06 总结常用命令 1. 安装源码 brew install wget  2. 显示软件的各种信息（包括版本、源码地址、依赖等） brew info svn  3. 卸载软件 $brew uninstall mpv  4.</description>
    </item>
    
    <item>
      <title>快速下载所需的Jar</title>
      <link>https://guobingyi.github.io/blog/%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%9A%84jar/</link>
      <pubDate>Tue, 06 Nov 2018 10:06:02 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%9A%84jar/</guid>
      <description>使用maven下载jar到本地 原来使用Java进行项目开发的时候，都是使用浏览器一个一个jar进行下载，放到lib目录中使用。 最近，发现使用maven的效率更高，所以，使用该方法。
1.创建一个pom.xml文件。 &amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.letour&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;!-- &amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;central-repos2&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;Central Repository 2&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://repo.spring.io/plugins-release&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt; --&amp;gt; &amp;lt;!-- &amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;maven.net.cn&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;oneof the central mirrors in china&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://maven.net.cn/content/groups/public/&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt; --&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;oschina-repos&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Oschina Releases&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.oschina.net/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;!-- &amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt; --&amp;gt; &amp;lt;!-- &amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;central&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;Maven Repository Switchboard&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://repo1.maven.org/maven2/&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt; --&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- TODO: add you need jar --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jasypt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jasypt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/project&amp;gt;  2.创建执行脚本 downloadjar.bat call mvn -f pom.</description>
    </item>
    
    <item>
      <title>Dbeaver</title>
      <link>https://guobingyi.github.io/opensource/dbeaver/</link>
      <pubDate>Tue, 23 Oct 2018 10:52:14 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/opensource/dbeaver/</guid>
      <description> Dbeaver项目  好项目，如何生存下去？
 官方项目地址：https://github.com/dbeaver/dbeaver
官方项目介绍：https://dbeaver.io/
开始听到DBeaver的时候，是一位同事在用，没有留意。
最主要的是想让自己的苹果电脑上少安装一些盗版软件，而做的真正的支持正版软件。
我评价一个好的开源项目，应该是下载源码后，能直接编译成功的。
当然，在编译DBeaver的时候也有一些小插曲，都已经解决了，并且成功编译，所以过了我自己评定好开源项目的第一关。
以下是编译的过程中出现的一些问题：
1.1 编译中下载插件无法下载。
需要翻墙，找个可以访问外网资源的软件就可以了，mac系统下推荐RocketVPN。  1.2 编译报错。
[INFO] org.jkiss.utils 2.1.78-SNAPSHOT .................... FAILURE [ 2.394 s]  问题是由于我手贱升级了java到11导致的，这个时候手动设置一下JAVA_HOME路径。
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home  ps. 遇到问题可以到项目中的Issues中查找，80%都能解决问题。
编译成功后会在在dbeaver/product/standalone/target/products/org.jkiss.dbeaver.core.product下产生三个平台的安装文件。
至此，编译完成。
从这个开源项目中可以花时间看一下，java语言开发的项目如何生成三个平台（linux,macosx,win32)的安装问题。
有时间需要弄明白的地方？
 Java如何编译成跨平台的项目？
 为何来维系这个开源项目，虽然本项目也分为社区版和企业版？
  </description>
    </item>
    
    <item>
      <title>12year</title>
      <link>https://guobingyi.github.io/life/12year/</link>
      <pubDate>Fri, 05 Oct 2018 16:05:26 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/life/12year/</guid>
      <description>12年的同学聚会  转眼间，12年飞逝。
 我还是非常期待这次同学聚会的。所以，我在知道后就把行程安排好了，同时也把火车票买了。做到，风雨无阻。
要去的头天晚上，好好还不让我去，她不想离开我。其实，我真的担心，在我去的时候她在家里哭闹，但是没有。
去的时候有点期待，毕竟是12年没有见到的同学，是不是应该有很多的话要说呢？
早上起来就期待着这次聚会，梳洗好后准备要走的时候，好好起床了，告诉我不让我走，但是我告诉她，这次爸爸要去的，是去见12年前的大学同学，好好在纠缠了一会也就放弃了，她只是希望我不要喝酒。然后，让我帮她带点礼物。
早上的昆明一样的堵，更何况下过雨。原本想做公交车的，还是害怕时间来不及还是打车了。师傅是个本地人，一上来就开始吐槽昆明的交警各种乱收费。
来到取票厅，我才发现，我早点来是对的，人山人海。
虽然原来的高铁票都是老婆弄的，第一次还是有点紧张，不知道要怎么出票，恩，说明我好久没有一个人出来了，也说明好多事情都是老婆代劳的。但是，30多岁的经验告诉我，不会弄，但是可以看看别人是怎么弄的就可以了，所以，我也没有刻意的去想，就想着到自己前面的人，就学着人家弄就可以了。然后开始看视频广告，一看不得了。原来是告诉大家，做高铁的时候，千万不要睡过头了，原来说的公交车睡过了，没有问题，就多几个站而已，高铁就惨了，睡过了，就从楚雄到大理了。所以，最让我警惕的是，不能睡觉。
买了票进站后，才发现人还是非常的多，看和多人的行头都是去大理玩的，很多年轻人，带着行李箱，一个人踏上了旅程。我甚至还看到一个母亲带着小孩旅游的，不得不佩服。如果让我一个人带的话，我是没有信心的。
火车上的时间是漫长的，因为心中期待这这次聚会，期待着自己给自己一个面对自己的时间。
在忍住了没有睡觉后，感觉随时都有可能到楚雄。摘掉了耳机，听着到播报“楚雄站，到了”的时候，就非常兴奋。
下站后的第一时间就是先把回来的车票出了，因为来楚雄的时候，让我感受到售票处的人还是那么多，我可能就不能正常回昆明了。公交车和出租车还是比较多的，我看了一眼可以到桃源湖的9路公交车就上去了，还好有一个座位。
我知道，其实我今天来的还是挺早的，但是我不想先到组委会那边，因为我想自己先走走。走一走自己曾经走过的路，看一看原来在的地方。
下车后，从河边开始走起，原来分为老城区和新城区就是靠这条和来进行分离的。而最近的一个公园就是龙江公园。 继续往前走，顺着原来熟悉的路，向前走。
这栋楼原来是楚雄州的昆明新知图书城，我曾经我最喜欢的一个地方，喜欢在这里买书，看一些新的技术。
电信大楼，我的第一个电话就是这里买的哦。我来这个地方就做两件事，来弄小灵通的事，或者就是每个月打款了。 原来上学的时候，每个月都是父亲打款过来的。
站在立交桥上，对四条路都有满满的回忆。这条路走得最多的是要到客运南站，虽然更多的是去北站坐车，但是也有情况去南站坐车。
这条路是开往北站的路，当然更多的是去北站坐车回家，当然也和老婆去火车站，去过一次大理。 这条路走往桃园湖，但是我去的更多的是楚雄州的图书馆，虽然书有点旧，但是还是在里面读了许多宝贵的知识，搞笑的事有次我去的时候， 有个电视台来采访，问了一下我对图书馆的感受，我还非常认真的配合。最后，图书管理员都对我非常好。哈哈～～
这条路就走的比较多，回学校的路，我们经常会来龙泰吃小吃，通宵，看电影。
上大学时期，比较流行的龙泰电影院，龙泰网吧。当然，还有个喝咖啡的地方。
在这个地方留下了太多太多的回忆，每次从南门坡做5角的微型车下来。大学的事情就两个，要不就是通宵网吧，要不就是小火锅。看似5角，但是很多时候，我们都是走着下来，并不是因为要省这5角，而是走的过程中感觉更好而已。
或许城市里，没有改变太多的就是这些小吃店吧。我还记得我们一起吃小火锅的情景。那时，我记得， 尚地每次火锅菜一熟就开始发烟，我和老彪，抽完烟发现怎么菜又没有了，哈哈😄。那个时候，三个人，两瓶茅梁。
特地跑过来，看了一下这个医院。因为有次老彪他们宿舍喝酒喝多了，集体来这个医院打点滴。而那次也吓到我们了，班主任都过来了，让我们守着他们一晚。我们在旁边开了个房间等他们。
原本想去原来经常吃米线的地方吃东西的，但是在路边看到这家回族的馆子还不错。依稀的小雨在下，肚子有点饿， 所以就想就在这家吃个小碗吧，遇到其他店再吃吧。
踢球是大学生活中非常有意思的，因为每次读书累了，踢球可以很好的解决这些问题。当然，在大学里，踢球好也会 让其他系来约踢球，相互比较。我们的球鞋都会买两种，一种是在大场上踢球用的，一种是在小场（篮球场）踢球的。 这家店是我们经常来买球鞋的。
依稀记得，在这个旁边是有个买面条的餐馆。那个时候吃面条，第一次看到是称两买的。而我检查吃的就小碗和大碗。中碗只存在 中学的时候，现在大部分都不使用了。牛x的楚一中，我们上学的时候，名气比我们大学大多了。当然，让我感觉牛的还是和他们高中队 踢了一次球，居然踢不过，可想而知。
楚雄州医院，我就记得有次我感冒去打了一次点滴。说明踢球的好处太多了。而那次打点滴，还看到一个女的，说她开车从昆明上来， 开车累了，就睡着了，撞到了路边，被过往的司机救了。感慨生活不能太拼了。
这个路口，不知在次等过多少次红绿灯。一个走到西山公园，一个走到南门坡。
这个南门坡有太多太多的回忆，有在这个地方的球场踢球。印象深刻的一次进球就是，和经管系踢球，胸部停球，然后凌空抽射。 球越过守门员入网，一气呵成。想想都是那么的让人激动。
在南门坡和爸爸妈妈分手，爸爸说：“是时候该断奶了！”。看着他们离去的背影，我真想不上学了，跟着他们回家。
在南门坡，为了赶北站最早的车回昆明，一个人走下来，没有人。只有火警车呼啸而过。最终在坡底找到了一个微型车，搭乘最早的早班车回家。
在南门坡，被小林老师看到，说我们这个时间不好好去上自习，来这里逛什么？被严重鄙视。
中师部的球场，如果我们在上球场找不到小场踢，就会跑到这边来玩。
博物馆也变的高端大气啦。
在博物馆的对面有个前卫在线还是什么的？原来喜欢来这里喝啤酒，听他们唱歌。原来就一瓶啤酒就可以做一个 晚上的地方，由于就是听歌，也没有什么好玩的，所以来的次数也不是很多。
原来的老师宿舍，下面是医务室，我原来会来找姜老师的。
终于到老校区的正门啦，虽然还有其他门，但是我来上学的时候，走的就是这道门，也就奠定了在我心中的地位。</description>
    </item>
    
    <item>
      <title>Upgrade</title>
      <link>https://guobingyi.github.io/blog/upgrade/</link>
      <pubDate>Mon, 27 Aug 2018 20:52:12 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/upgrade/</guid>
      <description>Upgrade 升级 一次偶然的机会在网上看到了一部片子叫《升级》，刚刚看到的时候感觉不到什么，都没有想到要去下载下来看一下。因为最近加班已经没有精力去看电影了，但是听说非常不错，也就下载了，找了一个时间段，将电影看了一下，感觉还真不错。
首先，看到精彩的地方是几点：
 一个机械师在家中的地下室陶腾他的那台老车，看是风格迥异，甚至我都感觉是不是在看赛车的节目。但是，可以看到的是，这个男猪脚的手艺不错，经过一番捣腾后，发动机还是响起了。
 画风一改，老婆做车无人驾驶汽车来，而且还可以在车上进行视频电话，完全可以抛现在的无人驾驶车好几条街。老婆为了和老公早点见面，匆匆挂断电话，导致我一度怀疑是不是，这个通电话的人买凶杀了老婆。
 超豪华的家，带上人工智能，在茶几上进行查看新闻和手指操作，让这个人工智能家居变得更加高大上。
 无人机值守，让整个区域都变成了监控范围。但是，也存在很多漏洞，掌控权在高级的用户上手，而所有有权限的，都可以进行篡改。在科技面前所有的东西都可以变的虚拟，所有的东西又都可以伪装。
 其实，在人工智能获取到最高权限就意味着人类已经被人工智能控制。
  在看完后，还是有许多让人思考的地方，比如前段时间看到的匿名者（anon）,都在说人工智能的事情，但是好在anon的人工智能还掌控在人类的手上，而升级却已经完全被人工智能掌握。最讽刺的是，人类总喜欢虚拟世界，这个和我们在玩的游戏有什么不同呢？我们都在现实生活中获取不到乐趣。那么，是否在虚拟世界里就可以活下去。这个又和《黑客帝国》中的人物一样，是否人到最后都是被圈养呢？可以让人进行无限的思考，如果现实社会不能让人感到快乐，那么是否在虚拟世界就让人快乐了。人类追求的到底是什么呢？好像非常矛盾，想让科技带给人类便捷的同时，却又害怕被科技替代。在电影中的科技，看似非常智能化，但是同样也可以让人感受到这种科技离我们越来越近，面临的是我们如何去看待这些科技。做为一个程序员，虽然非常想去实现这些科技，但是同时也为这种后果去思考。人类是否真的要被自己玩坏呢？
或许写代码也有这种感觉，感觉写一个脚本就可以完成好多自动化工作，甚至感觉所有的控制权都交给了系统。但是，或多或少，都会让我们感觉到，控制权必须掌握在自己手中，才有主动权。而在获取这种感觉的时候，都是通过不断的升级代码来完成的。当代码有自己的思维时候，或许我们也就要下岗了。
当主角说主动权交给人工智能后，每次结果都主角大吃一惊的时候，我就感觉到这种感觉非常不好，因为已经不可控制了。或许在这个时候，最好的选择就是放弃吧，但是又有多少人可以做到呢？</description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>https://guobingyi.github.io/code/vscode/</link>
      <pubDate>Fri, 24 Aug 2018 16:10:52 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/vscode/</guid>
      <description>Visual Studio Code 插件  近来对Visual Studio Code的使用频率越来越高，也同时对微软出的这款免费IDE越来越喜欢。
 1.Settings Sync 对于使用不同电脑进行开发的人，最喜欢的就是同一个IDE，相同的配置。所以Settings Sync可以解决这个问题。详细的使用还是参考帮助文档，对了，前提是你得注册了一个github账号。
2. Project Manager 其实这个功能就是为了在不同的项目中快速切换。恩，好用。
3. REST Client REST 客户端允许你直接发送 HTTP 请求并在 Visual Studio Code 中查看响应。比PostMan简单，但是可以在IDE中直接使用也不错。
4. Todo Tree 写惯了TODO，用这个就可以由个想eclipse的效果，感觉还不错。
5. Night Owl 晚上编码的时候可以用一下这个皮肤效果，不错。
6. markdownlint 使用hugo编写博客的时候，用到最多的插件，因为可以边写边看效果。
7. GO/C#/Ruby/Python/C/C++ 语言插件，根据自己使用来进行安装，但是像我这样，什么都想弄一下的，都装了。
8. Git History git项目提交后，git历史信息。
9.GitLens git项目提交信息和提交时间点信息。
10. minify 将javascript文件变为min格式，好用。原来都是在eclipse中使用相应的插件，现在visual studio code 也有了。
11. Org Model 原本这个应该是emacs才有的，而且功能比较强大。
12. SVN svn的可视化版本，虽然现在我都用命令行。
13. TODO Highling TODO:高亮显示，挺醒目滴。
14. vscode-icons 图标根据语言进行变化，对视角比较看重的同学可以试试。
15. XML Format 就是对xml文件内容进行格式化，让人能清晰的看懂。</description>
    </item>
    
    <item>
      <title>Others</title>
      <link>https://guobingyi.github.io/code/others/</link>
      <pubDate>Thu, 09 Aug 2018 11:39:34 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/others/</guid>
      <description>Don&amp;rsquo;t be evil
记录一些奇怪的错误  0x00 swift控制端启动错误 每次在控制台输入swift的时候，都会报这个错：
bingyideMacBook-Pro:~ guoby$ swift Traceback (most recent call last): File &amp;quot;&amp;lt;input&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt; File &amp;quot;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/copy.py&amp;quot;, line 52, in &amp;lt;module&amp;gt; import weakref File &amp;quot;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/weakref.py&amp;quot;, line 14, in &amp;lt;module&amp;gt; from _weakref import ( ImportError: cannot import name _remove_dead_weakref Welcome to Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2). Type :help for assistance.  很长时间没有解决，在使用了google后，最终找到了解决方案。
If you&#39;re on OSX and are using homebrew, check your packages installed with brew by running brew list, and if &amp;quot;python@2&amp;quot; appears in that list, and Python 2.</description>
    </item>
    
    <item>
      <title>Test-driven development with Go</title>
      <link>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</link>
      <pubDate>Tue, 07 Aug 2018 17:48:14 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</guid>
      <description>介绍 使用Go语言进行驱动开发。
讲什么 本书将讲解如何使用一个在线服务创建二维码，仅仅使用Go自带的框架。
二维条形码可以编写各种信息。许多智能手机都用扫描二维码的应用程序，你可能以前看见过，如果没有，下面就是典型的二维码信息：
二维码例子
在本书的结尾将由一个完整的例子，使用http服务来创建二维码。在此过程中，你讲学习到Go语言的一些特性和其标准库用法以及测试驱动开发。
预期读者 本书的读者需要有一定的编程基础，如果没有学习过Go,请点击此处进行学习。
要求 在阅读本书前，你需要准备以下工具：
Go Go语言环境是本书中的唯一要求。你可以从其官网进行下载安装。如果你的操作系统是OS X，可以使用Homebrew进行安装。 大多数的Linux都已经在包管理器中加入了Go。
一个终端 使用Go语言的最佳途径就是使用终端。大多数的Linux系统使用其自动的终端shell，苹果用户可以使用Terminal.app；而 windows用户可以使用Cygwin或Git Bash。
一个编辑器 最终，你将使用一个编辑器来进行编码。编辑器有非常多的选择，然而Sublime Text看起来非常流行。默认的 Go配置插件，Emasc和Vim都有提供。
翻译者：推荐Visual Studio Code，好用，免费。
代码实例 Go代码 本书包含大量代码示例。 Go代码是最突出的，这样的代码总是用文件名和行号注释; 这些数字不一定从1开始，但在写入时请参考文件中的位置。 每个片段都包含文件名作为其标题，通常后面跟着一些纯文本注释。
fragment.go
17 func (r *Receiver) MyFunc() err { 18 print(&amp;quot;Anything&amp;quot;) 19 print(&amp;quot;Even more&amp;quot;) 20 }  17
关于第17行的一些有趣信息。
17 - 20
关于从第17行到第20行的整个代码块的一些有趣信息。
有时代码样本缺少行号 - 在这种情况下，代码实际上并不包含在源代码中，而是意味着要点。
go fmt 高亮显示运算符优先级
func Hypothetical(a b c int) int { return 4*a*a + (b*c)/2 }  命令行会话 软件开发是编辑器和命令行之间的相互作用。相关命令行会话也包含在本书中，并呈现如下：</description>
    </item>
    
    <item>
      <title>健康</title>
      <link>https://guobingyi.github.io/life/health/</link>
      <pubDate>Tue, 07 Aug 2018 09:00:19 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/life/health/</guid>
      <description> 自己的健康问题  如果不是生死问题，所有的问题都是小问题。
 肾结石 从来都没有想到过自己会得这样的病，但是还是得了。
下面是医生开的结石药：
 热淋清颗粒  疗效我感觉就是在尿血的时候喝，到底起不起用不知道，反正吃了好多盒，石头依然在。
 舒泌通胶囊  打石药，也是吃了好多盒，石头依然在。
 结石通胶囊  打石药，和上面差不多，或许是因为上面的不起作用，换这种的吧，好几盒，石头依然在。
糖尿病  阿卡波糖片   骨化三醇胶丸   盐酸二甲双胍片   碳酸钙D3片   门冬胰岛素  </description>
    </item>
    
    <item>
      <title>GameOfThrones</title>
      <link>https://guobingyi.github.io/blog/gameofthrones/</link>
      <pubDate>Sat, 04 Aug 2018 15:20:33 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/gameofthrones/</guid>
      <description>冰与火之歌  很早的时候就有人推荐给我看，但是我一直都沉迷在《行尸走肉》中。觉得美剧中，没有比《行尸走肉》更好看的了。其实，我错了，大错特错。
 0x00 狼家 史塔克 从第一季就被鸿达的场面所吸引了，在此之前，我在看《天行健》这本书，也是感觉不错。但是还是被《冰与火之歌》吸引了。
在全剧中，我最喜欢的一句话就是凛冬将至（Winter is coming）。看似平静的生活，也会被无情的打乱。对于平静的北境，来自异鬼的威胁，来自国王罗伯的邀请。看似艾德·史塔克要开始新的生活，想不到是死路一条。一直以为的主角，到头来，谁也不敢猜测。
0x01 鹿家 罗伯 鹿家非常搞笑。
0x02 龙家 龙妈真的很惨。
0x03 玫瑰家 荆棘女王。
0x04 狮子家 “有债必还”是狮子家的人非常自豪的话。
小拇指说了一句话叫：“知识就是权力！”，而王后马上就说：“权力就是权力！”。非常经典。
0x05 守夜人 守夜人可以说是非常大公无私的，但是从守夜人的来源上看，又是地位非常卑微的人。
0x06 鹰家 鹰家给我的感觉就是没有好好的教育好下一代，让儿子非常随着母亲。</description>
    </item>
    
    <item>
      <title>Centos7搭建ftp服务</title>
      <link>https://guobingyi.github.io/blog/centos7%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 27 Jul 2018 09:42:51 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/centos7%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1/</guid>
      <description>Centos7 搭建ftp服务  其实，我需求的很简单，你别讲的那么复杂。
 第一次在centos7下搭建ftp服务，原来在redhat下搭建过，但是忘记了怎么搭建了。尴尬了，所以就重头开始。我的需求很简单，就是一个ftp服务，去掉匿名登录后，有个用户和密码，能将文件放到上面就完了。好了，需求有了，我用百度搜了“centos7 ftp服务搭建”，一大堆网页跑出了，我选择了一些常用的地方，比如csdn,博客园，红黑联盟。但是非常失望，没有一个地方可以很清楚的讲解清楚，如果照着页面上的做，那么可能会进入一个死结，但是文章中又没有提到该怎么解，反正人家是成功的，你的就不成功。郁闷！这就陷入另外的一个处境，你不得不尝试其他文章的方法，这样一折腾，一个早上，或者一天就结束了。希望我能在这里将我遇到的坑，和怎么解决的方法告诉大家，避免走弯路。
0x00 安装vsftpd 如果centos下没有安装vsftpd，那么就你就直接安装:
yum install vsftpd  如果安装了，那么就直接卸载了。
yum remove vsftpd  卸载后需要注意以下问题：
 查看线程是否存在  ps auxf | grep vsftpd  如果线程存在则直接 kill -9 .
 如果/etc/vsftpd文件夹存在，先删除在重新安装。  即：在重新安装前，全部vsftpd的线程不存在，文件夹为最新。
0x01 配置信息 ftp服务的配置信息路径为：
/etc/vsftpd/vsftpd.conf  一般对照配置修改以下内容：
#禁用匿名用户登录 anonymous_enable=NO #是否允许本地用户登录 chroot_local_user=YES #ftp根目录 local_root=/ftpserver/flowdata  0x02 创建本地用户  创建ftp用户  useradd jack   设置用户密码  echo &amp;quot;jack_pass_word&amp;quot; | passwd jack --stdin  3.限制该用户仅能通过 FTP 访问</description>
    </item>
    
    <item>
      <title>Anon</title>
      <link>https://guobingyi.github.io/blog/anon/</link>
      <pubDate>Sat, 14 Jul 2018 16:46:13 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/anon/</guid>
      <description>匿名者  What you look for every day of your life.Why you&amp;rsquo;ll never understand.It&amp;rsquo;s not that I have something to hide&amp;hellip; I hava nothing I want you to see.
 最近看了一部电影《匿名者》。
刚刚开始看的时候，还是被影片中的电脑特技给征服了。看到这种通过眼睛来进行扫描人员信息的时候，还是联想到了谷歌的glass。但是唯一的区别在于谷歌glass是可以摘下来的，而电影里的是每个人都被种植到了眼睛了，并且不能被摘除。如果被入侵了，那么人就瞎了。而且所谓的记忆，也会被删除。
不可否认，这样将主动权都交给了电脑，会提高相对的安全。但是，更多的是不安全。所以，电影里的女主角才启动了隐藏算法。越是绝对的控制，越是不安全。
隐私问题也是一个非常大的问题。现在人们越来越注重个人隐私。但是，在电影中，统治者将所有人的隐私进行统一管理，警察可以查看每个人的隐私，当然hacker也可以。就是说，我们的隐私被放到服务器上，有权限的人都可以看到。想想都恐怖，如果人没有了隐私，是不是社会会更安全。
在推特上也看到，现在社会中使用脸部采集，每个人去过什么地方，都会被该地方的监控录入，然后进行分析。就是说，如果你没有做什么，或者没有人来调用监控，那么你的隐私是安全的。但是如果有人调用了，那么你就没有什么所谓的隐私可言。
对于隐私来说，应该是双刃剑。用的好，可以造福人类，用的不好，也可以危害人类。电影中的去除影像技术，就是给犯罪人员逃脱法律制裁。而犯罪的依据有通过个人的视角来评定。所以，从电影中看出，这个系统是存在非常大的严重bug的。
结论就是，任何技术，任何规则，都不能摆脱人性。人之初，性本善。突然想到了《僵尸世界大战》上的13人原则，当12个人都同意的时候，必须有1个人来推翻12人。没有绝对的东西，事物都是两面性的。
害怕，将来会有这么一天。虽然是写代码的，但是也不能将所有的东西都交于代码。或许，有种说法叫返璞归真。太过于依赖技术，不如不用技术。我一直相信，科技只能听命于人类，而非让科技来主动指导人类。太多，太多的科幻片，都直奔主题，说科技导致了人类毁灭。但是，我觉得，《匿名者》这部电影，隐晦的道出了这个道理。而这种技术，离我们却又那么近。</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://guobingyi.github.io/blog/kafka/</link>
      <pubDate>Fri, 13 Jul 2018 19:46:58 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/kafka/</guid>
      <description>学习kafka  学习技术的过程中，我慢慢习惯去官网看看，不管学习什么。从什么时候开始，当我听说，别人讲给的听的感觉，就像人吃东西，然后在喂给你的时候。听着非常恶心。从营养角度来说，吃被人吐出来的东西，营养已经被消化了一部分。
 0x00 开始 kafka的官网 http://kafka.apache.org/  什么是kafka Apache Kafka是由Apache软件基金会开发的一个开源消息系统项目，由Scala写成。Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。 Kafka是一个分布式的、分区的、多复本的日志提交服务。它通过一种独一无二的设计提供了一个消息系统的功能。
0x01 kafka常用命令 注意
 &amp;amp;保证在关闭shell窗口后能继续运行
 在windows下将.sh改为.bat,“/”改为“\”
  开启ZooKeeper bin/zookeeper-server-start.sh config/zookeeper.properties &amp;amp;  开启kafka服务 bin/kafka-server-start.sh config/server.properties &amp;amp;  ps.如果通过终端进入，不要直接关闭终端，使用exit命令关闭，不然会出现kafka进程全部关闭的情况。
创建一个主题 bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test  列举主题 bin/kafka-topics.sh --list --zookeeper localhost:2181  发送消息  向主题为test的发送消息，输入字符后回车。  bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test   启动消费者  &amp;ndash;from-beginning 是从开始获取，可以不用该选项，直接从实时消息体获取信息。  bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning  启动kafka时需要配置的信息  在server.</description>
    </item>
    
    <item>
      <title>begin start learn c language</title>
      <link>https://guobingyi.github.io/blog/begin-start-learn-c-language/</link>
      <pubDate>Mon, 09 Jul 2018 09:18:07 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/begin-start-learn-c-language/</guid>
      <description> C学习笔记  c语言是大学里的入门语言，时隔十多年后，又开始学习。
 0x00 工具 工欲善其事必先利其器。
调试工具 在苹果电脑上直接使用gdb进行调试会存在一定的问题。所以最好的调试环境还是放到了docker上，或者直接使用了vs code 进行调试。因为这种那种的原因，所以最终还是决定使用vs code 进行ide。
 gdb调试
 在苹果系统中gdb调试各种不爽，sudo后也有其他问题；代码签名也有问题。反正就是苹果系统不推荐你使用就行了，别折腾太伤。本来是学习c语言的，绕了一大圈发现会在max os上使用gdb了。
 lldb调试
 苹果系统上推荐使用lldb进行调试c语言。所以想在mac os上调试，就用它吧，别和自己过不去。
IDE  Visual studio code
 微软推出的，免费。
 emacs
 这个不用说了吧，神器。但是，很难！
make  用过ant的都知道，ant是学习make写的。
 要想真正的了解make，还是在于读一遍文档吧。
https://www.gnu.org/software/make/manual/make.pdf  在读一遍陈浩大神的makefile教程。
https://blog.csdn.net/haoel/article/details/2886  这个地址将陈浩大神的帖子整理了一下。
https://blog.csdn.net/weixin_38391755/article/details/80380786  </description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>https://guobingyi.github.io/code/ruby/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:56 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/ruby/</guid>
      <description> Ruby 学习笔记 </description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://guobingyi.github.io/code/go/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:20 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/go/</guid>
      <description> go语言学习笔记 </description>
    </item>
    
    <item>
      <title>初探Shell</title>
      <link>https://guobingyi.github.io/blog/%E5%88%9D%E6%8E%A2shell/</link>
      <pubDate>Wed, 04 Jul 2018 19:54:52 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/%E5%88%9D%E6%8E%A2shell/</guid>
      <description>You got to put the past behind you before you can move on.
 由于项目上的需要开始接触shell，其实shell早就有过接触，只不过这次接触了，深入的思考了。
0x00 为什么用shell? 原来学习一门语言的时候都会这样问自己？但是大多数的答案都是：项目上需要。没有思考的余地，也就没有深入的思考。
现在开始用到，也学习了python,ruby,swift,javascript后发现，shell有她自身更好的发挥余地。比如我们经常会使用的命令cd,hugo server,git add -A等。别小看这些命令，一个一个来，还是要输入一会的。程序员不就图个安逸，一个shell脚本搞定的事情，为什么要多来输入几次呢？在举个例子，如果终端只有一个，那么要看tomcat的日志，还要更新类，那么就会来回的路径下切换，如果不用文本记录下来，光敲路径就花费很长的时间，so，用个shell脚本就可以解决了。当然，这个例子也不能说明shell的强大之处，那么这个例子就是shell的重要用途了。在零部署的时候，需要安装一些组件，数据库，初始化数据库脚本，注册服务，启动服务，关机。整个流程可以说一气呵成，但是如果是人工的话，那么想想工作量也是吓人的，这还不包括部署多台服务器呢。
如果是安装系统，会非常喜欢ghost版本，安装就step by step。而shell就提供了这样功能。当然有人会说python也一样搞定。是的，不可否认，但是如果python自身也需要安装库呢？所以，shell独天得厚的优势在于系统自带的同时，还可以自动安装所需的命令。
结论就是：如果你需要将命令step by step执行，那么就选择shell吧。
0x01 Hello,World! 每个学习程序设计的开始都会是这个，也因为这个才从此入坑。
创建文件hello.sh,输入一下内容：
#!/bin/bash echo &#39;Hello.World!&#39;  在终端中使用sh hello.sh,将输出以下结果：
Hello,World!  恭喜你，入门了。
思考：
 为什么第一行会有个#!/bin/bash echo 可以用单引号，也可以用双引号，区别是什么？ 如果要让shell脚步可以直接运行，怎么做？ 如何文件后缀是php,那么有该如何做呢？  0x02 变量 shell的变量命令基本和常用语言(pythoh/ruby/java/go)基本差不多，目前还没有遇到过坑。
那么如何定义一个变量呢？ someone=&amp;quot;Lee&amp;quot; some_two=&amp;quot;http://10.10.10.222&amp;quot;  看似简单的定义变量，如果写多了程序，就会有个问题，如下：
someone = &amp;quot;Lee&amp;quot; #Eroor  为什么会有这个错误，因为写代码的时候都喜欢来个空格，这样看着顺眼些，但是在shell里是错误的。因为变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
变量名和等号之间不能有空格。
重要的事情说三遍，你要知道调试shell，就像java里System.out.println(&amp;ldquo;ok&amp;rdquo;)一样麻烦，更何况shell木有断点功能。目前我还不知道shell的ide，或者打断点，如果你知道，请告诉我，让我试试。
使用变量 $someone $(some_two)  只读变量 readonly someone  删除变量 unset someone  0x03 字符串 单引号 someone=&#39;Lee&#39;   单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</description>
    </item>
    
    <item>
      <title>倚天屠龙记读后感</title>
      <link>https://guobingyi.github.io/blog/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Sun, 24 Jun 2018 22:11:31 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>个性，决定了一个人未来能走多远。
 金庸的小说一直都是自己喜欢的。从高中开始，读的第一本书是《鹿鼎记》，那个时候是老师要求读的，原来都不知道有金庸这个人。从此一发不可收拾，开始追读金庸的小说。到大学的时候，由于金庸的小说有限，所以一直省着读。工作后，读了《笑傲江湖》，近期读了《倚天屠龙记》。
张无忌这个人的角色，开始就是一个悲情的角色。让人从开始就非常心疼他，关心他。正所谓，天无绝人之路，掉进山洞，学到了九阳真经。治好了自己体内的玄冰之毒，而且也学到了上乘武功。从这里开始，大家都觉得应该是登山人生巅峰。可是，如果这样小说就没有太多意义了。人性贯穿到金庸的小说中，都是宣扬着“正气”，而要突出这些“正气”，就要从多个方面来说明。真善美，假恶臭。在小说中，这几个人被刻画的非常形象生动。
 张三丰  张三丰，一个小和尚，自己开创了武当门派。或许，也只有大师才能有如此的造诣。对待生活的态度，不是一板一拍；对待世间的事，也不是循规蹈矩。当然，武功上的造诣，更是独自悟道，发明了太极心法。
 谢逊  爱恨分明，敢作敢当。对家人的爱，超出你的想象。聪明，不是说出来的。
 小昭  如果说要和张无忌比惨的话，小昭算一个。能这样忍辱负重，并最后实现人生目标的人，真的，厉害。
 周芷若  我竟然自己想到了周芷若的剧情，想她应该是前朝皇帝的女儿才这样希望张无忌能掌管大权的。其实，我真的想多了。
 赵敏  手段不是一般的厉害，和张无忌的妈妈有得一拼。因为电影了，演员是同一个赵敏，所以这两个角色真是难分，同时也感慨张敏的演的真好。
在小说中，每个人物都刻画的非常深刻。或许也只有金庸才能将这些人物写的那么鲜活。</description>
    </item>
    
    <item>
      <title>Think</title>
      <link>https://guobingyi.github.io/blog/think/</link>
      <pubDate>Fri, 22 Jun 2018 09:41:18 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/blog/think/</guid>
      <description> 想法很多  自从没有在游戏上花费太多的时间，现在想法也很多。
 1.用hugo搭建自己的博客 现在已经使用了，但是感觉样式不怎么好看，慢慢在来改了。
不管怎么说，一切的开始，虽然难，但是都在前进就好！
2.用docker中的centos来搭建开发环境 因为自己的系统是macos，所以很多代码不一定能跑起来，比如dbdk。所以就想用docker的方式来搭建一个开放平台，这样即使换了电脑或则系统，都可以使用docker把镜像导入进来。思路而已，还要考虑的问题如下：
 如何将镜像进行备份和同步；   初步的想法是docker将镜像导出，然后git到github上进行存储。但是这些都是需要压缩和加密的。
 如何将实体机的开发环境弱化；   目前的开发环境都在本机的实体机上，所以想要弱化就必须考虑到一些开发ide，比如java的eclipse。想到用eclipse che来替代，就看docker是否能支持的好了。
3.尝试着写本书 这个就是一个伏笔了，希望能带来惊喜。当然，这个仅仅是生活的一部分，如果依赖就抱有太大的希望，就太给自己压力了。
先学着写吧。
4.科技改变生活 我觉得先从自己的生活改变开始，让自己的工作效率更高。为了达到这边目标，先从以下几点做起：
 使用shell脚本，将自己常用的命令进行一个封装； 将一些程序中经常使用的工具进行汇总，供shell脚本使用； 自己编写代码，提供没有的工具。  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://guobingyi.github.io/about/</link>
      <pubDate>Fri, 22 Jun 2018 09:36:13 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/about/</guid>
      <description>别人笑我太疯癫，我笑他人看不穿。
技能
 Java golang python ruby c/c++  </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://guobingyi.github.io/contact/</link>
      <pubDate>Fri, 22 Jun 2018 09:23:35 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/contact/</guid>
      <description>怎么联系我，邮箱吧！
但是，不一定回。 ：）</description>
    </item>
    
    <item>
      <title>Think</title>
      <link>https://guobingyi.github.io/post/think/</link>
      <pubDate>Thu, 21 Jun 2018 18:52:37 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/think/</guid>
      <description> 想法很多  自从没有在游戏上花费太多的时间，现在想法也很多。
 1.用hugo搭建自己的博客 现在已经使用了，但是感觉样式不怎么好看，慢慢在来改了。
不管怎么说，一切的开始，虽然难，但是都在前进就好！
2.用docker中的centos来搭建开发环境 因为自己的系统是macos，所以很多代码不一定能跑起来，比如dbdk。所以就想用docker的方式来搭建一个开放平台，这样即使换了电脑或则系统，都可以使用docker把镜像导入进来。思路而已，还要考虑的问题如下：
 如何将镜像进行备份和同步；   初步的想法是docker将镜像导出，然后git到github上进行存储。但是这些都是需要压缩和加密的。
 如何将实体机的开发环境弱化；   目前的开发环境都在本机的实体机上，所以想要弱化就必须考虑到一些开发ide，比如java的eclipse。想到用eclipse che来替代，就看docker是否能支持的好了。
3.尝试着写本书 这个就是一个伏笔了，希望能带来惊喜。当然，这个仅仅是生活的一部分，如果依赖就抱有太大的希望，就太给自己压力了。
先学着写吧。
4.科技改变生活 我觉得先从自己的生活改变开始，让自己的工作效率更高。为了达到这边目标，先从以下几点做起：
 使用shell脚本，将自己常用的命令进行一个封装； 将一些程序中经常使用的工具进行汇总，供shell脚本使用； 自己编写代码，提供没有的工具。  </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://guobingyi.github.io/about_old/</link>
      <pubDate>Tue, 19 Jun 2018 22:28:42 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/about_old/</guid>
      <description> 别人笑我太疯癫，我笑他人看不穿。
 喜欢程序设计，致力于将终身奉献给程序设计。
 talk is cheap,show me the code!  </description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://guobingyi.github.io/post/config/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:56 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/config/</guid>
      <description>看一下hugo的配置  当初觉得为什么hugo可以比beego那么多star,现在可以理解了。
 因为用go开发web的人，没有使用hugo创建自己博客的多。
来一个图片的例子：</description>
    </item>
    
    <item>
      <title>One</title>
      <link>https://guobingyi.github.io/post/one/</link>
      <pubDate>Fri, 15 Jun 2018 23:50:17 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/one/</guid>
      <description>测试为什么图像没有  原来都有的，现在没有？
 我觉得就是哪里配置的问题。
** 粗体 **</description>
    </item>
    
    <item>
      <title>Good</title>
      <link>https://guobingyi.github.io/post/good/</link>
      <pubDate>Fri, 15 Jun 2018 23:45:20 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/good/</guid>
      <description> 测试一下中文是否支持 </description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://guobingyi.github.io/post/test/</link>
      <pubDate>Fri, 15 Jun 2018 23:31:47 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/test/</guid>
      <description> Test my blog  new day will come,wzry go away!
 </description>
    </item>
    
    <item>
      <title>Newday</title>
      <link>https://guobingyi.github.io/post/newday/</link>
      <pubDate>Fri, 15 Jun 2018 23:30:41 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/post/newday/</guid>
      <description> Hello,Hugo! </description>
    </item>
    
  </channel>
</rss>