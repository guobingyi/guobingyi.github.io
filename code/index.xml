<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on guobingyi</title>
    <link>https://guobingyi.github.io/code/</link>
    <description>Recent content in Code on guobingyi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Feb 2020 19:37:59 +0800</lastBuildDate>
    
	<atom:link href="https://guobingyi.github.io/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Csharp</title>
      <link>https://guobingyi.github.io/code/csharp/</link>
      <pubDate>Thu, 06 Feb 2020 19:37:59 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/csharp/</guid>
      <description>C#  C#的学习有太多的情怀，比如pascal。
 一直都在不断的换语言来学习，来弥补学习上的懒惰。
不知道是什么原因，我突然对每种语言都热衷起来，对我原来写的那篇博客打脸，或者说也不能算是打脸，而是不同时期的不同思考罢了。 😊
第一份工作是冲着Java的Sun认证去的，发现是vb和Delphi开发的项目。而在此之前，大学毕业的时候看到老九用C#写代码，老高就让我好好学习一下，而我的那台老电脑还存着第一本书是介绍C#的。说明在最早的时候，我认识到的是C#，而不是Java。
刚刚毕业的时候，学习一门技术的时候，都是去书店里找书。或者准确的说，互联网的发展没有像现在一样。需要学习什么，都需要从书本上去看，然后在实践。现在不同了，需要什么样的知识，直接到官网看文档。不能说是能力提升了，还是知识的获取变得更轻松了。也难怪最近几年的技术类书几乎都没有买了，因为官网上的文档已经非常全面，而且都非常规范。原来的模式是买书，实践，向师傅请教，然后思考，最后才到看文档。现在的模式是文档，实践，文档，google就基本能完成了。现在的模式拉锯了师傅之间的距离，师傅层面上知道的是经验问题，而经验也会由于技术的发展而落后，或者失效。所以，从这个层面上来说，如果不学习，那么很快就会被超越。
学习语言的目的是什么？我想就是用该语言快速的完成任务。更好听的是实现自己的思想。生活在这个时代太幸福了，不需要一来就学习汇编语言，有非常多的高级语言供我们选择。现阶段我比较喜欢的go，打动我的是真正的跨平台。python，ruby吧，你要装运行环境，Java呢，虚拟机要装，C#要安装dotnet-sdk。Rust准备看一下。扯远了，学习的目的还是有所需求。比如，公司的项目就是该语言开发的，你要继续开发；公司的项目需要重新搭建，你需要进行评估。总之，学习带着目的来和不带目的来，学习的效果是不一样的。
最近，突发奇想，把所学的语言都重新认真的看一遍，因为不是有时间嘛，把时间浪费在有意义的事情上，多好。而最先被看到的是C#，那种熟悉的感觉依稀记得。所以直接安装了。
brew cask install dotnet-sdk 安装完看了一下版本，都3.1.101了，发展速度，好快。
快速的搭建了一个hello world项目。
dotnet new console --name Hello ps. 创建项目很快就Restore succeeded. 但是为什么终端还是需要等1分钟左右，我怀疑还在下载什么东西，怪我网速慢咯。
执行项目。
 cd Hello dotnet run 这样一个hello,world就打印在终端了，嗯，是非常速度的。
接着就可以用你喜欢的IDE打开项目，开始慢慢品味了。
code -r Hello 最小的完整代码片段：
using System; namespace Hello { class Program { static void Main(string[] args) { Console.WriteLine(&amp;quot;Hello World!&amp;quot;); } } } 怎么样，C#的开发已经够简单了吧，如果是原来，第一得先下个dotnet runtime，还有visual studio 200X的IDE，那么你才能进行C#的开发，当然也有免费的IDE，但是和visual studio比较起来就逊色多了。现在有免费的Visual studio Code可以用，可以说越来越对开发人员友好了，也可以说选择越来越多了。
 在学习任何一门语言的时候，最重要的事情就是集中关注概念，不要迷失在语言的技术细节中。学习语言的目的是成为一个更好的程序员；也就是说，使自己在设计和实现新系统时，以及在维护老系统时，能够工作得更有效。为此，对与程序设计和设计技术的理解远比对细节的理解更重要，而这种理解的根本是时间和实践。
 在看完了将近2000多页的C#文档，对C#有了新的认识，当然最重要的是学习到了C#可以运用的地方，什么时候用，什么地方用。在大脑里有一个认识，比如在简析XML文件的时候，LINQ的运用太棒了，比如异步调用的方式等。所有的这些内容都可以提供在以后的设计过程中的一个参考，一个衡量。最终，决定用什么最有效，最快速的完成任务。
下面是一些非常重要的部分：
C# 教程  官方的例子，手把手教你。</description>
    </item>
    
    <item>
      <title>ProxySet</title>
      <link>https://guobingyi.github.io/code/proxyset/</link>
      <pubDate>Thu, 30 Jan 2020 11:05:10 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/proxyset/</guid>
      <description>Mac下代理设置  采菊东篱下，悠然见南山。
 一直都在网络上找Mac下的代理设置，因为使用了VPN。但是，查找的资料一直都没有能说清楚，直到昨天，终于看到了这篇文章，把我近几个月来的烦恼都解决了。不知道能不能查阅到，所以我贴了大部分内容。
在终端下访问系统代理 scutil命令管理系统配置参数，通过 &amp;ndash;proxy参数来显示系统代理信息。
未配置代理情况：
$ scutil --proxy &amp;lt;dictionary&amp;gt; { FTPPassive : 1 HTTPEnable : 0 HTTPSEnable : 0 } 配置代理的情况：
$ scutil --proxy &amp;lt;dictionary&amp;gt; { ExcludeSimpleHostnames : 1 FTPEnable : 0 FTPPassive : 1 GopherEnable : 0 HTTPEnable : 1 HTTPPort : 49199 HTTPProxy : localhost HTTPSEnable : 1 HTTPSPort : 49199 HTTPSProxy : localhost ProxyAutoConfigEnable : 0 ProxyAutoDiscoveryEnable : 0 RTSPEnable : 0 SOCKSEnable : 0 } 解析scutil输出 我们可以使用awk解析scutil的输出并提取代理配置。 以下代码片段可以解决问题：</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://guobingyi.github.io/code/git/</link>
      <pubDate>Fri, 30 Aug 2019 07:03:51 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/git/</guid>
      <description>Git 常用命令 1.初始化仓库信息
 git init 增加文件信息到库   git add -A 提交代码   git commit -m &amp;quot;first commit&amp;quot; 同步到远程库   git push -u origin master 将远程库信息同步到本地   git clone http://192.168.100.226:3000/guoby/wzry.git 撤销提交操作  git commit --amend 重新更新git服务器信息  git remote rm origin git remote add origin http://192.168.100.201:3000/guoby/wzry.git git push -u origin master 删除文件  8.1 删除单个文件
git rm ._ddd.file 8.2 删除多个文件
find . -name &amp;quot;._*&amp;quot; -delete git add -A git commit -m &#39;delete others file&#39; </description>
    </item>
    
    <item>
      <title>Go Beego</title>
      <link>https://guobingyi.github.io/code/go-beego/</link>
      <pubDate>Fri, 14 Dec 2018 10:16:03 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/go-beego/</guid>
      <description>beego tutorial  无他， 但手熟尔。
 0x00 介绍 1. beego 简介 beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。
2. beego 的架构 beego 是基于八大独立的模块构建的，是一个高度解耦的框架。当初设计 beego 的时候就是考虑功能模块化，用户即使不使用 beego 的 HTTP 逻辑，也依旧可以使用这些独立模块，例如：你可以使用 cache 模块来做你的缓存逻辑；使用日志模块来记录你的操作信息；使用 config 模块来解析你各种格式的文件。所以 beego 不仅可以用于 HTTP 类的应用开发，在你的 socket 游戏开发中也是很有用的模块，这也是 beego 为什么受欢迎的一个原因。大家如果玩过乐高的话，应该知道很多高级的东西都是一块一块的积木搭建出来的，而设计 beego 的时候，这些模块就是积木，高级机器人就是 beego。至于这些模块的功能以及如何使用会在后面的文档逐一介绍。
3. beego 的执行逻辑 既然 beego 是基于这些模块构建的，那么它的执行逻辑是怎么样的呢？beego 是一个典型的 MVC 架构。
4. beego 项目结构 一般的 beego 项目的目录如下所示：
├── conf │ └── app.</description>
    </item>
    
    <item>
      <title>Go Tutorial</title>
      <link>https://guobingyi.github.io/code/go-tutorial/</link>
      <pubDate>Thu, 13 Dec 2018 14:28:45 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/go-tutorial/</guid>
      <description>Go Tutorial  学习一门语言最好的方式，就是熟读其文档。
 0x00 安装 安装go语言是件轻松的事情，如果安装都非常困难，那么还有什么好说的。
Mac下安装 brew install go Windows下安装 推荐使用MSI installer方式安装，一直Next下去就可以了。
0x01 Hello,world! package main import ( &amp;quot;fmt&amp;quot; ) // Print Hello,world! func main() { fmt.Printf(&amp;quot;Hello,World!&amp;quot;) } 0x01 文档查阅 godoc -http=:6060 0x02 入门  文档介绍如何安装  http://localhost:6060/doc/install 如何编写go语言  http://localhost:6060/doc/code.html 如何高效的编写go语言  http://localhost:6060/doc/code.html 熟悉go语言的api  http://localhost:6060/pkg/ 0x03 深入  已beego框架学习如何编写web项目  https://beego.me 关注go语言的Top项目  https://github.com/topics/go 学习go语言框架提供的第三方包  https://github.com/avelino/awesome-go </description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>https://guobingyi.github.io/code/vscode/</link>
      <pubDate>Fri, 24 Aug 2018 16:10:52 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/vscode/</guid>
      <description>Visual Studio Code 插件  近来对Visual Studio Code的使用频率越来越高，也同时对微软出的这款免费IDE越来越喜欢。
 1.Settings Sync 对于使用不同电脑进行开发的人，最喜欢的就是同一个IDE，相同的配置。所以Settings Sync可以解决这个问题。详细的使用还是参考帮助文档，对了，前提是你得注册了一个github账号。
2. Project Manager 其实这个功能就是为了在不同的项目中快速切换。恩，好用。
3. REST Client REST 客户端允许你直接发送 HTTP 请求并在 Visual Studio Code 中查看响应。比PostMan简单，但是可以在IDE中直接使用也不错。
4. Todo Tree 写惯了TODO，用这个就可以由个想eclipse的效果，感觉还不错。
5. Night Owl 晚上编码的时候可以用一下这个皮肤效果，不错。
6. markdownlint 使用hugo编写博客的时候，用到最多的插件，因为可以边写边看效果。
7. GO/C#/Ruby/Python/C/C++ 语言插件，根据自己使用来进行安装，但是像我这样，什么都想弄一下的，都装了。
8. Git History git项目提交后，git历史信息。
9.GitLens git项目提交信息和提交时间点信息。
10. minify 将javascript文件变为min格式，好用。原来都是在eclipse中使用相应的插件，现在visual studio code 也有了。
11. Org Model 原本这个应该是emacs才有的，而且功能比较强大。
12. SVN svn的可视化版本，虽然现在我都用命令行。
13. TODO Highling TODO:高亮显示，挺醒目滴。
14. vscode-icons 图标根据语言进行变化，对视角比较看重的同学可以试试。
15. XML Format 就是对xml文件内容进行格式化，让人能清晰的看懂。</description>
    </item>
    
    <item>
      <title>Others</title>
      <link>https://guobingyi.github.io/code/others/</link>
      <pubDate>Thu, 09 Aug 2018 11:39:34 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/others/</guid>
      <description>Don&amp;rsquo;t be evil
 记录一些奇怪的错误 0x00 swift控制端启动错误 每次在控制台输入swift的时候，都会报这个错：
bingyideMacBook-Pro:~ guoby$ swift Traceback (most recent call last): File &amp;quot;&amp;lt;input&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt; File &amp;quot;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/copy.py&amp;quot;, line 52, in &amp;lt;module&amp;gt; import weakref File &amp;quot;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/weakref.py&amp;quot;, line 14, in &amp;lt;module&amp;gt; from _weakref import ( ImportError: cannot import name _remove_dead_weakref Welcome to Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2). Type :help for assistance. 很长时间没有解决，在使用了google后，最终找到了解决方案。
If you&#39;re on OSX and are using homebrew, check your packages installed with brew by running brew list, and if &amp;quot;python@2&amp;quot; appears in that list, and Python 2.</description>
    </item>
    
    <item>
      <title>Test-driven development with Go</title>
      <link>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</link>
      <pubDate>Tue, 07 Aug 2018 17:48:14 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</guid>
      <description>介绍 使用Go语言进行驱动开发。
讲什么 本书将讲解如何使用一个在线服务创建二维码，仅仅使用Go自带的框架。
二维条形码可以编写各种信息。许多智能手机都用扫描二维码的应用程序，你可能以前看见过，如果没有，下面就是典型的二维码信息：
在本书的结尾将由一个完整的例子，使用http服务来创建二维码。在此过程中，你讲学习到Go语言的一些特性和其标准库用法以及测试驱动开发。
预期读者 本书的读者需要有一定的编程基础，如果没有学习过Go,请点击此处进行学习。
要求 在阅读本书前，你需要准备以下工具：
Go Go语言环境是本书中的唯一要求。你可以从其官网进行下载安装。如果你的操作系统是OS X，可以使用Homebrew进行安装。 大多数的Linux都已经在包管理器中加入了Go。
一个终端 使用Go语言的最佳途径就是使用终端。大多数的Linux系统使用其自动的终端shell，苹果用户可以使用Terminal.app；而 windows用户可以使用Cygwin或Git Bash。
一个编辑器 最终，你将使用一个编辑器来进行编码。编辑器有非常多的选择，然而Sublime Text看起来非常流行。默认的 Go配置插件，Emasc和Vim都有提供。
翻译者：推荐Visual Studio Code，好用，免费。
代码实例 Go代码 本书包含大量代码示例。 Go代码是最突出的，这样的代码总是用文件名和行号注释; 这些数字不一定从1开始，但在写入时请参考文件中的位置。 每个片段都包含文件名作为其标题，通常后面跟着一些纯文本注释。
fragment.go
17 func (r *Receiver) MyFunc() err { 18 print(&amp;#34;Anything&amp;#34;) 19 print(&amp;#34;Even more&amp;#34;) 20 } 17
关于第17行的一些有趣信息。
17 - 20
关于从第17行到第20行的整个代码块的一些有趣信息。
有时代码样本缺少行号 - 在这种情况下，代码实际上并不包含在源代码中，而是意味着要点。
go fmt 高亮显示运算符优先级
func Hypothetical(a b c int) int { return 4*a*a + (b*c)/2 } 命令行会话 软件开发是编辑器和命令行之间的相互作用。相关命令行会话也包含在本书中，并呈现如下：</description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>https://guobingyi.github.io/code/ruby/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:56 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/ruby/</guid>
      <description>Ruby 学习笔记 </description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://guobingyi.github.io/code/go/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:20 +0800</pubDate>
      
      <guid>https://guobingyi.github.io/code/go/</guid>
      <description>go语言学习笔记 </description>
    </item>
    
  </channel>
</rss>