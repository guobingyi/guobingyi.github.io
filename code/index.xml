<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on guobingyi</title>
    <link>https://guobingyi.github.io/code/</link>
    <description>Recent content in Code on guobingyi</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 11 Apr 2024 18:53:53 +0800</lastBuildDate>
    <atom:link href="https://guobingyi.github.io/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用moviepy进行电影剪辑</title>
      <link>https://guobingyi.github.io/code/moviepy/</link>
      <pubDate>Thu, 11 Apr 2024 18:53:53 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/moviepy/</guid>
      <description>&lt;h1 id=&#34;使用moviepy进行电影剪辑&#34;&gt;使用moviepy进行电影剪辑&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;退一步，海阔天空！&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;有个执念，总想比一下到底谁最快，python/c#/go/rust/java。但是，现实告诉我，谁能快速的解决问题，就够了。&lt;/p&gt;&#xA;&lt;p&gt;最近，老婆的工作要进行视频剪辑，老师推荐了剪影，可是呢？有水印，要充VIP，我一看，就答应了帮老婆来干这个事情。满怀信心的打开PR，发现自己已经不会用了。🤣这可咋办呢？问了一下文心一言，在chatGPT3.5还没有免费的时候，文心一言还是比较好用的。文心一言告诉我有个moviepy的库，好的用一下。&lt;/p&gt;&#xA;&lt;p&gt;以下是文心一言给的代码，蛮不错。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from moviepy.editor import VideoFileClip  &#xA;  &#xA;# 加载视频文件  &#xA;clip = VideoFileClip(&amp;#34;my_video.mp4&amp;#34;)  &#xA;  &#xA;# 剪辑视频，从第10秒到第20秒  &#xA;subclip = clip.subclip(10, 20)  &#xA;  &#xA;# 写入剪辑后的视频文件  &#xA;subclip.write_videofile(&amp;#34;my_subclip.mp4&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用下来，每次都要自己算一下时间，所以自己又写了一个。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from moviepy.editor import VideoFileClip  &#xA;  &#xA;# 加载视频文件  &#xA;video = VideoFileClip(&amp;#34;demo.mp4&amp;#34;)  &#xA;  &#xA;# 剪辑视频，设置开始和结束时间（单位为秒）  &#xA;# 这里假设我们想要剪辑从第5秒到第15秒的部分&#xA;# 16:40 ~ 21:21 &#xA;# 24:30 ~ 26:00&#xA;# 33:00 ~ 33:47&#xA;# 39:00~ 43:00&#xA;# 47:30 ~ 57:00&#xA;# 58:10 ~ 1:00:02&#xA;# 1:04:40 ~ 1:07:10&#xA;# 1:13:00 ~ 1:18:42&#xA;# 1:19:18 ~ 1:23:40&#xA;s_h = 1&#xA;s_min = 19&#xA;s_sec = 18&#xA;&#xA;e_h = 1&#xA;e_min = 23&#xA;e_sec = 40&#xA;&#xA;start_time = s_h * 60 * 60 + s_min * 60 + s_sec&#xA;end_time = e_h * 60 * 60 + e_min * 60 + e_sec&#xA;#print( &amp;#39;Start time :&amp;#39;,start_time)&#xA;#print( &amp;#39;End time :&amp;#39;,end_time)&#xA;subclip = video.subclip(start_time, end_time)  &#xA;  &#xA;# 写入剪辑后的视频到新的文件  &#xA;subclip.write_videofile(&amp;#34;output_08.mp4&amp;#34;, codec=&amp;#39;libx264&amp;#39;)&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Update_python</title>
      <link>https://guobingyi.github.io/code/update_python/</link>
      <pubDate>Wed, 04 Oct 2023 21:34:43 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/update_python/</guid>
      <description>&lt;h2 id=&#34;python更新记录&#34;&gt;Python更新记录&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;知之为知之，不知为不知。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;从python3.10.0到3.12.0已经更新了许多版本，我原来的习惯都是用venv的模式加pyenv来进行开发的。现在，更新至3.12突然发现自己每次使用一个项目就要创建一个venv的模式有点占用空间了。没有转变过来，如果开发新项目或者项目彼此之间没有太多连接的情况下，或许venv的模式是不错的选择，可是，对于个人项目而言，又过于太严谨化了。什么都要和自己匹配才是最好的呢？&lt;/p&gt;&#xA;&lt;p&gt;由于自己的项目过多的使用venv模式，导致每使用一个项目就要切换到不同的venv中，所以速度慢，而且需要记住的东西较多，反而把自己搞累了。现在想把项目统一到一个地方，这样就不那么累了，启动项目，开始工作。&lt;/p&gt;&#xA;&lt;p&gt;迁移的第一步从将pyenv迁移到扩展卡，毕竟128G的主力盘不能浪费。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注：扩展卡就780M，感觉可以先把电影看掉一些在搞这个工作了。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;开始搞起，因为macOS下没有Command + x，那么就使用mv命名吧。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mv .pyenv /Volumes/Transcend/Project/python_code/pyenv_home&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;加入配置命令：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PYENV_ROOT=/Volumes/Transcend/Project/python_code/pyenv_home/.pyenv&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Done.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;安装python3.12.0报错：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pyenv install 3.12.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;报错原因：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BUILD FAILED (OS X 12.7 using python-build 20180424)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决步骤：&lt;/p&gt;&#xA;&lt;p&gt;1.删除老的CommandLineTools&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rm -rf /Library/Developer/CommandLineTools&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.重新安装Xcode Command line tools&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Hello_mojo</title>
      <link>https://guobingyi.github.io/code/hello_mojo/</link>
      <pubDate>Sun, 24 Sep 2023 13:39:14 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/hello_mojo/</guid>
      <description>&lt;h1 id=&#34;hellomojo&#34;&gt;Hello,mojo&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;尽信书，不如无书！&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://guobingyi.github.io/img/code/mojo-dev.jpg&#34; alt=&#34;mojo in code&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;最近mojo进入我的视眼，因为官网宣传比python快68000倍。我抱着怀疑的态度，想尝试一下，毕竟最近领悟了“人生苦短，我用python”的理念。&lt;/p&gt;&#xA;&lt;p&gt;第一时间订阅了mojo SDK的下载通知，在2023年9月7日迎来了第一版本的SDK下载，非常兴奋的去下载页面，都没有来得及仔细阅读，就把下载命令拷贝在终端，像rust语言一样的简单，可是报错了，发现这个版本的SDK只支持在Ubuntu上运行，被搞得难受极了，心了有了无数匹马在奔腾。好吧，既然这样就仔细遇到阅读了安装手册，说可以使用docker来弥补现在的这个版本，好吧，既然这样就安装docker了。可是，万万没有想到，docker居然会出现那么严重的问题，我的主盘128G空间剩余20G，连个docker都安装不了，赶紧腾出了30G的趋势卡来安装，docker这个混蛋居然把所有空间占满了，还启动报错，F**K。连续安装了几次后，果断放弃了。看着mojo的文档说马上会推出macOS的SDK，心想就这样吧～～&lt;/p&gt;&#xA;&lt;p&gt;2023年9月21日，mojo推出了v0.3.0版本，我认真仔细的读了变更日志，没有推出macOS的SDK，心里不爽，不是说coming soon吗？好吧，我等不了了，既然docker用不了，那有没有替代品呢？找到了podman。我是来安装mojo的，想不到吧？我去安装了podman来安装Ubuntu了，呵呵。看了podman的介绍，还好和docker比较相似，用法上没有太多的难点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-安装podman&#34;&gt;1. 安装podman&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-macos上的神器-brew&#34;&gt;1.1 macOS上的神器 brew&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install podman&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;12-初始化podman&#34;&gt;1.2 初始化podman&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;podman machine init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;13-启动podman&#34;&gt;1.3 启动podman&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;podman machine start&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;14-查找ubuntu&#34;&gt;1.4 查找Ubuntu&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;podman search docker.io/ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;15-安装启动ubuntu&#34;&gt;1.5 安装启动Ubuntu&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;podman run -it docker.io/library/ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;16-进入到podman虚拟机&#34;&gt;1.6 进入到podman虚拟机&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;podman machine ssh&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>The_best_language</title>
      <link>https://guobingyi.github.io/code/the_best_language/</link>
      <pubDate>Thu, 24 Aug 2023 12:42:21 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/the_best_language/</guid>
      <description>&lt;h1 id=&#34;最好的编程语言&#34;&gt;最好的编程语言&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;海象说是时候谈谈了。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;0x00-缘起&#34;&gt;0x00 缘起&lt;/h2&gt;&#xA;&lt;p&gt;最初第一次认识电脑，是同学带自己去玩游戏，那个时候街机已经不流行了，流行的是电脑游戏。看到电脑的样子感觉很高级，不知道这个东西到底能做什么，只知道可以玩好玩的游戏。😳&lt;/p&gt;&#xA;&lt;p&gt;慢慢的，不知道是天意还是命运，被没有填报志愿的计算机学院录取。第一天就被系主任的话迷住，用c语言来改变世界。自从认识了c语言后就开始鄙视任何语言，php/python/js/html是第一批被鄙视的语言，因为那个时候觉得这样的语言就是给非计算机人是用的。开始喜欢那种有Power的语言，所以第一c语言，第二c++语言。可是，那个时候，除了从书本上学习到知识外都很少从互联网学习知识，看到书本上的语法，例子，真的是无聊到极点。那个时候比较流行做管理系统，所以看到了Delphi的身影。可惜，Delphi的语法和c的语法有点不同，相对c#的语法要好些。所以，更多的学习了c#，可是怎么用呢？还是没有一个明确的思路。直到买了一本Visual Becial.net的书，按照书中的例子来写点小例子，如记事本。后来，在图书馆里看到了Java语言，书中说这个语言要改变世界，因为编译一次，到处运行。还不知道什么叫夸平台，因为只知道世界上只有Windows。&lt;/p&gt;&#xA;&lt;p&gt;凭借着对程序的热爱，开始找工作，到处都是Java程序员的招聘，而自己的文凭又不是那么强势，所以只能硬着头皮考了Java程序员认证。也凭着一点点运气被一家公司录取，开始了程序员之旅。第一家公司使用vb6和Delphi进行系统开发，那个时候还是比较开心的，因为是自己喜欢的语言，开发比较有动力。后来，互联网强势来袭，C#的asp.net和Java的Sevlet开始抗争。平台开始转移到Linux下，C#的优势没有了，全部都Java的天下。最后到移动端，也是Java的天下，微软的势力被缩减。&lt;/p&gt;&#xA;&lt;p&gt;原来工作的时候，是公司使用什么技术，你就得用什么技术，或者说你选择技术，来为公司谋利。那么在技术选型上就得考虑许多问题，比如平台，Windons的服务器比Linxu的服务器贵，而且技术单一。比如语言，go语言可以和Java语言一样高效，可是没有Java的生态圈好。python语言可以很快开发出原型，可是性能问题让大家都放弃。而且开发人员的层次不一样，所以不能使用上手慢的语言，比如rust。&lt;/p&gt;&#xA;&lt;p&gt;后来，没有工作的限制，自己当成爱好来写代码的时候，就不一样了。什么简单，就什么来。慢慢明白了python的格言，“人生苦短，我用python。”&lt;/p&gt;&#xA;&lt;p&gt;最近，突发奇想，把自己写的下载视频python代码，用不同语言来实现一遍，看看自己以前的语言还熟悉吗？&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x01-go语言&#34;&gt;0x01 go语言&lt;/h2&gt;&#xA;&lt;p&gt;go语言是工作后最喜欢的语言，没有之一。为什么呢？&lt;/p&gt;&#xA;&lt;h3 id=&#34;第一简单高效&#34;&gt;第一，简单，高效&lt;/h3&gt;&#xA;&lt;p&gt;go语言的语法非常简单，几句语言就可以开发一个文件服务器。在使用的过程中，除了老忘记语句结束不需要;外，基本都能很平顺的写出代码。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二跨平台编译&#34;&gt;第二，跨平台编译&lt;/h3&gt;&#xA;&lt;p&gt;可以在macOS上编译成在Windows或者Linux上的程序，你说开心不？&lt;/p&gt;&#xA;&lt;h3 id=&#34;第三google出品&#34;&gt;第三，Google出品&lt;/h3&gt;&#xA;&lt;p&gt;一般大厂出品的东西，安全/性能都非常出色，并且保证了持续的发展。&lt;/p&gt;&#xA;&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;&#xA;&lt;p&gt;如果在追求性能，快速实现的基础上go是非常好的选择，但是和python相比，少了许多库和非常好的生态圈。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x02-rust语言&#34;&gt;0x02 rust语言&lt;/h2&gt;&#xA;&lt;p&gt;和go语言相比，rust语言的确学习起来要难些。但是它的用途却是提供高性能，无垃圾回收，所以对比而言，这个用来做核心功能应该不错。目前，还是没有学通。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x03-c&#34;&gt;0x03 C#&lt;/h2&gt;&#xA;&lt;p&gt;曾经最喜欢的语言之一，跨平台后一直都舍不得uninstall。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x04-java&#34;&gt;0x04 Java&lt;/h2&gt;&#xA;&lt;p&gt;吃饭的语言，自从学会了后，一直都用Java在公司进行开发，你说它的作用大不大？&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x05-python&#34;&gt;0x05 python&lt;/h2&gt;&#xA;&lt;p&gt;在工作中碰到几次，没有上心。没有工作后，特别喜欢使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x06-开始&#34;&gt;0x06 开始&lt;/h2&gt;&#xA;&lt;p&gt;最近使用自己写的python脚本下载m3u8格式的视频，基本上做点事情回来视频便下载好了，非常方便。在魔兽世界里，有句话说：“我的朋友，时间就是金钱！”。使用python脚本的时候，就觉得速度上是不是可以提速一点，所以想用go语言来改写一下，Cursor也用上了，不得不说gpt的确帮了许多忙。&lt;/p&gt;&#xA;&lt;h3 id=&#34;python语言&#34;&gt;python语言&lt;/h3&gt;&#xA;&lt;p&gt;python语言简单，第三方的库比较丰富。想到就可以做到的语言，恐怕只有python吧~~。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Howtousebarcode</title>
      <link>https://guobingyi.github.io/code/howtousebarcode/</link>
      <pubDate>Sat, 29 Jul 2023 16:18:49 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/howtousebarcode/</guid>
      <description>&lt;h1 id=&#34;如何读取照片中的条码信息&#34;&gt;如何读取照片中的条码信息&lt;/h1&gt;&#xA;&lt;p&gt;最近考虑到如何输入图书信息到系统中，发现了条码信息的重要性，所以想使用手机自带的功能来使用。&lt;/p&gt;&#xA;&lt;p&gt;服务器端使用 C# 和 Python 来使用验证上传的图片。&lt;/p&gt;&#xA;&lt;h2 id=&#34;choice1python-获取条码信息&#34;&gt;Choice1：Python 获取条码信息&lt;/h2&gt;&#xA;&lt;p&gt;相对而言 Python 的库比较多，使用起来比较方便。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-安装-zbar&#34;&gt;1. 安装 zbar&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install zbar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;依赖性：Fetching dependencies for zbar: jbig2dec, libidn, ghostscript, libde265, shared-mime-info, libheif, liblqr, libomp, libraw and imagemagick&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-安装-pyzbar&#34;&gt;2. 安装 pyzbar&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install pyzbar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-安装-pillow&#34;&gt;3. 安装 Pillow&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install pillow&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-test-code&#34;&gt;4. Test Code&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from pyzbar.pyzbar import decode&#xA;from PIL import Image&#xA;&#xA;bar_result = decode(Image.open(&amp;#39;book1.jpg&amp;#39;))&#xA;&#xA;if len(barresult) &amp;gt; 0 :&#xA;    print(&amp;#34;find barcode:&amp;#34; + barresult[0].data.decode())&#xA;else:&#xA;    print(&amp;#34;can&amp;#39;t find barcode!&amp;#34;)&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Ada</title>
      <link>https://guobingyi.github.io/code/ada/</link>
      <pubDate>Thu, 17 Nov 2022 21:13:48 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/ada/</guid>
      <description>&lt;h1 id=&#34;ada&#34;&gt;Ada&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://guobingyi.github.io/img/code/ada.png&#34; alt=&#34;ada&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;被Ada的名字所吸引，来到了Ada Programming的世界。在&lt;a href=&#34;https://en.wikibooks.org/wiki/Ada_Programming&#34;&gt;wiki&lt;/a&gt;上描述，Ada是一种适合所有程序员使用的语言。但是，我查阅资料后，发现Ada最开始是美国军方为了整理在军队中使用太多的语言而创建的一种语言。知乎上对此提及的也很少，说在波音飞机中使用到该语言，而我从学习Python的过程中了解了次语言便开始一路逛奔过来。&lt;/p&gt;&#xA;&lt;p&gt;要怪就得怪我太发散了，什么东西都喜欢弄个清楚，搞个明白。最终，才逐渐明白，很多语言都是基于C或者C++的。要想彻底的搞清楚，最终还是逃脱不了C和C++，宿命吧～～&lt;/p&gt;&#xA;&lt;p&gt;话说Python中所说的：“人生苦短，我用Python。”可是，对与我来说就是想学习一些不一样的东西，我就喜欢在程序的世界里。所以，写代码的目的不是为了逃避，而是为了满足自己。&lt;/p&gt;&#xA;&lt;p&gt;或许是年龄的问题，记忆的东西已经不如从前了，在此就记录一下自己跟进的进度，等再次要学习的时候而不是抓狂，再次从头开始。&lt;/p&gt;&#xA;&lt;p&gt;我选择的是&lt;a href=&#34;https://www.adacore.com/&#34;&gt;AdaCore&lt;/a&gt;，说SPARK可以和Rust一样编写可靠的代码，广告害人呢！到官网下载，只能选择GNAT Community，软件版本许可的问题。也可以想到为什么使用的人少了，毕竟选择的太多啦。苹果电脑只支持到2020，只能选择&lt;a href=&#34;https://community.download.adacore.com/v1/aefa0616b9476874823a7974d3dd969ac13dfe3a?filename=gnat-2020-20200818-x86_64-darwin-bin.dmg&amp;amp;rand=787&#34;&gt;下载&lt;/a&gt;。下载之后，说好的IDE也没有包括，导致自己纠结好久要不要自己编译一下。可是想到自己的128G的硬盘，想算啦。命令行不是也可以吗？想不到后面也是坑加坑。&lt;/p&gt;&#xA;&lt;p&gt;默认安装路径为：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/opt/GNAT/2020&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装之后需要手工加入路径：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export ADA_PATH=/Users/guoby/opt/GNAT/2020/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开始编写第一个ada程序：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;with Ada.Text_IO;&#xA;use Ada.Text_IO;&#xA;procedure Greet is&#xA;begin&#xA;    -- Print &amp;#34;Hello, World!&amp;#34; to the screen&#xA;    Put_Line (&amp;#34;Hello, World!&amp;#34;);&#xA;    Put_Line (&amp;#34;你好，世界!*2&amp;#34;);&#xA;    Put_Line(&amp;#34;ok?&amp;#34;)&#xA;end Greet;&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Autotest</title>
      <link>https://guobingyi.github.io/code/autotest/</link>
      <pubDate>Mon, 03 Oct 2022 15:12:08 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/autotest/</guid>
      <description>&lt;h2 id=&#34;自动化测试&#34;&gt;自动化测试&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Arduino</title>
      <link>https://guobingyi.github.io/code/arduino/</link>
      <pubDate>Wed, 27 Oct 2021 16:39:15 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/arduino/</guid>
      <description>&lt;h3 id=&#34;0x00-初识arduino&#34;&gt;0x00 初识Arduino&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原来的梦想就是能自己DIY做些东西。&#xA;原来看的电影里总是老外在地下室捣鼓一下，就发明了各种个样的东西!&#xA;后来自己学了计算机，终于可以大展身手的时候，才发现，自己能做的仅仅数据的处理工作，输入，输出，太没劲～～&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;我自己比较喜欢倒腾，但是就是会受限与自己熟悉的方面。比如，我特别喜欢去看一些编程语言，然后用它们来对比，如何快速的完成项目。python,ruby,go,java,dotnet core等等。当然了，我所谓的项目就是自己熟悉的领域，Web编程或者命令行，桌面等等。&lt;/p&gt;&#xA;&lt;p&gt;由于关注dotnet core的跨平台，所以去了解了一下asp.net的现状，发现这货现在的开发效率是真的高太多了，几个命令行就可以做出一个基本的原型。抱着兴奋的态度想要推荐给周围的人的时候，发现别人说在玩单片机，反而给我搞蒙了，啥，这么牛，推荐来看看～～&lt;/p&gt;&#xA;&lt;p&gt;Arduino第一次映入眼帘，是个什么东西呀？幸好有Mac版本的，不然让我用那台Thinkpad x230的话，我还是比较不爽的，速度太慢，Windows的操作感受真不想回去。&lt;/p&gt;&#xA;&lt;p&gt;我的想法还是比较保守的，先百度，当然了能google更好。再去B站看看视频，当然了youtube上的资源更全些。刚开始发现，Arduino的IDE还不错，毕竟还是有点样子的。更何况，操作起来也挺方便～～。听了一会，发现需要个什么开发板，我去，还需要点硬件的投资嘛，好，按照视频的推荐，去买了一个。然后，小白告诉我有很多东西的，推荐了许多来看看，发现有个套装，219的价格，我去，忍了，买。（当然了，买了之后，有后悔，但是也有庆幸～～，后面聊）&lt;/p&gt;&#xA;&lt;p&gt;板子是三天后到的，在这个空档期，把asp.net的开发教程走了一遍，毕竟都学习了嘛～～&lt;/p&gt;&#xA;&lt;p&gt;拿到板子开始学习了，很兴奋，可以学习了。发现，板子就可以用个LED的的闪烁，完了。:(&lt;/p&gt;&#xA;&lt;p&gt;还好有了套装，按照套装做了个双色的LED实验，老师在介绍的时候，忘记说为什么要这样接，好像是书上有，当时是硬着头皮直接和老师的一样接，OK，成功了～～ 但是一点也不喜悦，因为那些线为什么要这样接，不知道，对，真的一点都知道？！@@#@#@，整个人都不好了，难道每个线都这样记，那没有乐趣嘛。这个时候，还好听了一个台湾老师的讲课，才明白～～，面包版的线路，为什么要这样接，正负，信号，插脚。这样兴趣才提高了一点点。&lt;/p&gt;&#xA;&lt;p&gt;开始对Arduino重新有了一个认识，就是可以通过编程的方式，把代码写入开发版中，让代码控制信号。而信号可以在不同的模块中使用，如射线的接收与发射，在通过Wi-Fi模块进行控制，便成了物联网。真的是这样的吗？&lt;/p&gt;&#xA;&lt;p&gt;小白送来了Wi-Fi模块和射线的接收发送模块，而我为了验证一下学习成果，买了门禁卡的模块，想自己试试，从而让自己不需要每年都找物管刷卡，或者买卡。&lt;/p&gt;&#xA;&lt;p&gt;其实，最让人兴奋的是看着这些小小的模块，把曾经的想法一一实现了，那就是最大的乐趣。看到电子产品或者有电子模块的东西，都是由最简陋的电子模块实现的，现在看什么都是模块的组装～～&lt;/p&gt;&#xA;&lt;h3 id=&#34;0x01-该从哪里入手呢&#34;&gt;0x01 该从哪里入手呢？&lt;/h3&gt;&#xA;&lt;p&gt;其实，我自己都不知道怎么入手的。&lt;/p&gt;&#xA;&lt;p&gt;但是，入手前问问自己喜不喜欢就可以了。喜欢，就投入，不喜欢，还说什么～～&lt;/p&gt;&#xA;&lt;p&gt;提前准备的是看一看Arduino的介绍，可以用来干什么，有没有Get到自己的兴趣所在，如果有，那么继续&amp;hellip;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;虽然说买个套装贼贵，但是没人指导，这个是最好的选择。为什么这样说呢？套装中有个开发版，有几个模块，面包版，电线，LED灯，电阻等等，为你做实验提供了基本的条件。照着提供的视频学习，基本上不会出现怪异的问题，提高学习兴趣。没有指导，又特别想学，推荐买个套装，贵就贵吧，毕竟入门了是吧～～&lt;/p&gt;&#xA;&lt;p&gt;但是，如果有人指导，当然是要什么买什么，价格便宜。适合资金紧张，又想学的人。&lt;/p&gt;&#xA;&lt;p&gt;当然了，无论哪种选择，都能学到东西。难道，不是吗？最合适的比喻就是组装台式机和品牌台式机的差别。（苹果电脑除外）&lt;/p&gt;&#xA;&lt;p&gt;手里有了硬件上的支持，就可以开始动手。&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s go!&lt;/p&gt;&#xA;&lt;h3 id=&#34;0x02-下载-arduino-ide&#34;&gt;0x02 下载 Arduino IDE&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;官网&lt;/a&gt;下载Arduino的IDE。如果不知道去那里下载，那么在点&lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;Software下载&lt;/a&gt;。还不知道怎么弄，那么还得去&lt;a href=&#34;https://search.bilibili.com/all?keyword=arduino&#34;&gt;B站&lt;/a&gt;去看看基础课程吧。毕竟，学习还是要多看看，是吧？&lt;/p&gt;&#xA;&lt;h3 id=&#34;0x03-你好arduino&#34;&gt;0x03 你好，Arduino！&lt;/h3&gt;&#xA;&lt;p&gt;我记得，任何一门语言都会对着世界说，你好！可惜，如果在Arduino上使用的话，你还得买个显示屏模块，算了，我们用LED对世界说你好吧～～&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void setup()&#xA;{&#xA;  //定义输出&#xA;  pinMode(LED_BUILTIN, OUTPUT);&#xA;}&#xA;void loop()&#xA;{&#xA;  digitalWrite(LED_BUILTIN, HIGH); &#xA;  delay(2000);                    &#xA;  digitalWrite(LED_BUILTIN, LOW);  &#xA;  delay(2000);                   &#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Rust by Example</title>
      <link>https://guobingyi.github.io/code/rustbyexample/</link>
      <pubDate>Tue, 15 Jun 2021 17:48:43 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/rustbyexample/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>LearnRust</title>
      <link>https://guobingyi.github.io/code/learnrust/</link>
      <pubDate>Sat, 29 May 2021 11:20:30 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/learnrust/</guid>
      <description>&lt;h1 id=&#34;rust-学习笔记&#34;&gt;Rust 学习笔记&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;自从在工作是使用了Go语言后，就不断的打破原来的模式，想什么都用Go来实现，可惜有些东西，特别是Windows下的窗口程序，就无能为力了，其他的好像都可以试一试。因为关注Go，所以Node的作者想重新写Node的时候，选择了Go，最后居然换成了Rust。这不得不让我对这门语言有了新的看法，特别是微软和Google都要推Rust的时候，我放弃了我原来对这门语言的偏见，重新、认真的学习一遍，让我看看到底是什么让它受到那么多人的关注。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;系统级别的语言，可以和C/C++抗衡？目标就是为了取代C++。&lt;/p&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;Rust语言能够编写速度更快，更加可靠的软件。&lt;/p&gt;&#xA;&lt;p&gt;学习笔记为1.52.1版本，如果你来晚了，最好参考&#xA;&lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;最新文档&lt;/a&gt; 来进行学习。你懂的～～&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x01-开始&#34;&gt;0x01 开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1目标&#34;&gt;1.目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装&lt;/li&gt;&#xA;&lt;li&gt;写个输出hello world的程序&lt;/li&gt;&#xA;&lt;li&gt;使用cargo工具来构建系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-安装&#34;&gt;2 安装&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-安装&#34;&gt;2.1 安装&lt;/h4&gt;&#xA;&lt;p&gt;其实在苹果电脑上，能用brew安装的，我一般都会使用。可惜，Rust推荐的最佳方式，并不是。😊&lt;/p&gt;&#xA;&lt;p&gt;所以，使用Rust的安装方式，最佳。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 https://sh.rustup.rs -sSf | sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装成功后，将在命令端输出：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Rust is installed now. Great!&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;22-更新&#34;&gt;2.2 更新&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rustup update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;23-删除&#34;&gt;2.3 删除&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rustup self uninstall&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Learn Asp.net Core</title>
      <link>https://guobingyi.github.io/code/learnasp.net/</link>
      <pubDate>Tue, 26 Jan 2021 09:34:14 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/learnasp.net/</guid>
      <description>&lt;h2 id=&#34;学习aspnet-core&#34;&gt;学习Asp.net Core&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;开始了，就不要放弃。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;每次想去学习一点程序设计的知识，都被老婆叫停，说我已经不需要通过写代码来改变生活了。可惜，我就是喜欢程序代码，骨子里已经埋藏了许久，现在终于可以按照自己的想法来写点东西，或者可以想怎么玩就怎么玩了。工作期间，除了要去完成工作上的事宜，其他的时间还要对新技术进行预演，了解每个语言的特性。每次都是对一门语言有了认识后，就没机会深入了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cppdirdemo</title>
      <link>https://guobingyi.github.io/code/cppdirdemo/</link>
      <pubDate>Sat, 29 Feb 2020 17:23:06 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/cppdirdemo/</guid>
      <description>&lt;h2 id=&#34;make构建c项目&#34;&gt;Make构建C++项目&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;使用VS Code编写代码的时候，总报错“Makefile:4: *** missing separator.  Stop.”，换成Emacs后就搞定了，发现Tab的格式有问题，或许emacs才是最好的选择，写C++。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;1创建目录point&#34;&gt;1.创建目录Point&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir Point&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-创建头文件pointh&#34;&gt;2. 创建头文件point.h&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim point.h&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内容如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class point{&#xA;private:&#xA;        int x;&#xA;        int y;&#xA;public:&#xA;        point(int a,int b):x(a),y(b){}&#xA;        void print();&#xA;        ~point(){}&#xA;};&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>程序目录结构</title>
      <link>https://guobingyi.github.io/code/programdir/</link>
      <pubDate>Sat, 29 Feb 2020 16:10:22 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/programdir/</guid>
      <description>&lt;h2 id=&#34;软件项目的目录结构和文件结构&#34;&gt;软件项目的目录结构和文件结构&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;孙悟空对师傅说，“我想要学72变！”。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;graph LR&#xA;程序目录结构--&amp;gt;Include&#xA;程序目录结构--&amp;gt;Source&#xA;程序目录结构--&amp;gt;Resource&#xA;程序目录结构--&amp;gt;Shared&#xA;程序目录结构--&amp;gt;Debug&#xA;程序目录结构--&amp;gt;Release&#xA;程序目录结构--&amp;gt;Bin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;include&#34;&gt;Include&lt;/h3&gt;&#xA;&lt;p&gt;Include目录下用于存放应用程序的头文件集合，也就是.h文件集合，在这个目录下面还可以根据需要划分子目录。&lt;/p&gt;&#xA;&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;&#xA;&lt;p&gt;Source目录用于存放应用程序的源代码文件集合，也就是.c或者.cpp文件集合，在这个目录下也可以根据需要进行划分子目录。&lt;/p&gt;&#xA;&lt;h3 id=&#34;resource&#34;&gt;Resource&lt;/h3&gt;&#xA;&lt;p&gt;Resource目录用于存放应用程序的一些资源文件，比如图片、视频、音频、对话框、图标以及光标等等，同样也可以划分几个子目录，便于管理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;shared&#34;&gt;Shared&lt;/h3&gt;&#xA;&lt;p&gt;Shared目录用于存放应用程序的一些共享文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;debug&#34;&gt;Debug&lt;/h3&gt;&#xA;&lt;p&gt;Debug目录用于存放应用程序进行调试时的调试版本产生的中间文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;release&#34;&gt;Release&lt;/h3&gt;&#xA;&lt;p&gt;Release目录用于存放应用程序进行发布时的发布版本产生的中间文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bin&#34;&gt;Bin&lt;/h3&gt;&#xA;&lt;p&gt;Bin目录用于存放自己创建的lib文件或dll文件。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注意绝对路径和相对路径的概念以及使用；&lt;/li&gt;&#xA;&lt;li&gt;注意区分编译时的相对路径和运行时的相对路径的概念。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>生成CA证书</title>
      <link>https://guobingyi.github.io/code/createca/</link>
      <pubDate>Thu, 27 Feb 2020 17:08:12 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/createca/</guid>
      <description>&lt;h2 id=&#34;生成ca证书&#34;&gt;生成CA证书&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;https的数据传输加密已经正是成为了标准。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;在使用Web运用的时候，为了避免明文传输，加入https协议是比较明智的，毕竟投入量也是最小的。&lt;/p&gt;&#xA;&lt;p&gt;ps.使用iTerm2的时候，输入密码报错，而使用mac自带的终端就成功，为什么？怀疑iTerm2在保存密码吗？&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-创建根证书密钥文件rootkey&#34;&gt;1. 创建根证书密钥文件root.key&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl genrsa -des3 -out root.key&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-创建根证书的申请文件rootcsr&#34;&gt;2. 创建根证书的申请文件root.csr&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl req -new -key root.key -out root.csr&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-创建一个自当前日期起为期十年的根证书rootcrt&#34;&gt;3. 创建一个自当前日期起为期十年的根证书root.crt&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey root.key -in root.req -out root.crt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-创建服务器证书密钥serverkey&#34;&gt;4. 创建服务器证书密钥server.key&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl genrsa –des3 -out server.key 2048&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-创建服务器证书的申请文件servercsr&#34;&gt;5. 创建服务器证书的申请文件server.csr&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl req -new -key server.key -out server.csr&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Csharp</title>
      <link>https://guobingyi.github.io/code/csharp/</link>
      <pubDate>Thu, 06 Feb 2020 19:37:59 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/csharp/</guid>
      <description>&lt;h2 id=&#34;c&#34;&gt;C#&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;C#的学习有太多的情怀，比如pascal。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一直都在不断的换语言来学习，来弥补学习上的懒惰。&lt;/p&gt;&#xA;&lt;p&gt;不知道是什么原因，我突然对每种语言都热衷起来，对我原来写的那篇博客打脸，或者说也不能算是打脸，而是不同时期的不同思考罢了。 😊&lt;/p&gt;&#xA;&lt;p&gt;第一份工作是冲着Java的Sun认证去的，发现是vb和Delphi开发的项目。而在此之前，大学毕业的时候看到老九用C#写代码，老高就让我好好学习一下，而我的那台老电脑还存着第一本书是介绍C#的。说明在最早的时候，我认识到的是C#，而不是Java。&lt;/p&gt;&#xA;&lt;p&gt;刚刚毕业的时候，学习一门技术的时候，都是去书店里找书。或者准确的说，互联网的发展没有像现在一样。需要学习什么，都需要从书本上去看，然后在实践。现在不同了，需要什么样的知识，直接到官网看文档。不能说是能力提升了，还是知识的获取变得更轻松了。也难怪最近几年的技术类书几乎都没有买了，因为官网上的文档已经非常全面，而且都非常规范。原来的模式是买书，实践，向师傅请教，然后思考，最后才到看文档。现在的模式是文档，实践，文档，google就基本能完成了。现在的模式拉锯了师傅之间的距离，师傅层面上知道的是经验问题，而经验也会由于技术的发展而落后，或者失效。所以，从这个层面上来说，如果不学习，那么很快就会被超越。&lt;/p&gt;&#xA;&lt;p&gt;学习语言的目的是什么？我想就是用该语言快速的完成任务。更好听的是实现自己的思想。生活在这个时代太幸福了，不需要一来就学习汇编语言，有非常多的高级语言供我们选择。现阶段我比较喜欢的go，打动我的是真正的跨平台。python，ruby吧，你要装运行环境，Java呢，虚拟机要装，C#要安装dotnet-sdk。Rust准备看一下。扯远了，学习的目的还是有所需求。比如，公司的项目就是该语言开发的，你要继续开发；公司的项目需要重新搭建，你需要进行评估。总之，学习带着目的来和不带目的来，学习的效果是不一样的。&lt;/p&gt;&#xA;&lt;p&gt;最近，突发奇想，把所学的语言都重新认真的看一遍，因为不是有时间嘛，把时间浪费在有意义的事情上，多好。而最先被看到的是C#，那种熟悉的感觉依稀记得。所以直接安装了。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew cask install dotnet-sdk &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完看了一下版本，都3.1.101了，发展速度，好快。&lt;/p&gt;&#xA;&lt;p&gt;快速的搭建了一个hello world项目。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dotnet new console --name Hello&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps. 创建项目很快就Restore succeeded. 但是为什么终端还是需要等1分钟左右，我怀疑还在下载什么东西，怪我网速慢咯。&lt;/p&gt;&#xA;&lt;p&gt;执行项目。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; cd Hello&#xA; dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样一个hello,world就打印在终端了，嗯，是非常速度的。&lt;/p&gt;&#xA;&lt;p&gt;接着就可以用你喜欢的IDE打开项目，开始慢慢品味了。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code -r Hello&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最小的完整代码片段：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;using System;&#xA;&#xA;namespace Hello&#xA;{&#xA;    class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            Console.WriteLine(&amp;#34;Hello World!&amp;#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>ProxySet</title>
      <link>https://guobingyi.github.io/code/proxyset/</link>
      <pubDate>Thu, 30 Jan 2020 11:05:10 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/proxyset/</guid>
      <description>&lt;h2 id=&#34;mac下代理设置&#34;&gt;Mac下代理设置&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;采菊东篱下，悠然见南山。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一直都在网络上找Mac下的代理设置，因为使用了VPN。但是，查找的资料一直都没有能说清楚，直到昨天，终于看到了&lt;a href=&#34;https://dmorgan.info/posts/mac-network-proxy-terminal/&#34;&gt;这篇文章&lt;/a&gt;，把我近几个月来的烦恼都解决了。不知道能不能查阅到，所以我贴了大部分内容。&lt;/p&gt;&#xA;&lt;h3 id=&#34;在终端下访问系统代理&#34;&gt;在终端下访问系统代理&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;scutil&lt;/strong&gt;命令管理系统配置参数，通过 &lt;strong&gt;&amp;ndash;proxy&lt;/strong&gt;参数来显示系统代理信息。&lt;/p&gt;&#xA;&lt;p&gt;未配置代理情况：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ scutil --proxy&#xA;&amp;lt;dictionary&amp;gt; {&#xA;  FTPPassive : 1&#xA;  HTTPEnable : 0&#xA;  HTTPSEnable : 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置代理的情况：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ scutil --proxy&#xA;&amp;lt;dictionary&amp;gt; {&#xA;  ExcludeSimpleHostnames : 1&#xA;  FTPEnable : 0&#xA;  FTPPassive : 1&#xA;  GopherEnable : 0&#xA;  HTTPEnable : 1&#xA;  HTTPPort : 49199&#xA;  HTTPProxy : localhost&#xA;  HTTPSEnable : 1&#xA;  HTTPSPort : 49199&#xA;  HTTPSProxy : localhost&#xA;  ProxyAutoConfigEnable : 0&#xA;  ProxyAutoDiscoveryEnable : 0&#xA;  RTSPEnable : 0&#xA;  SOCKSEnable : 0&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://guobingyi.github.io/code/git/</link>
      <pubDate>Fri, 30 Aug 2019 07:03:51 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/git/</guid>
      <description>&lt;h3 id=&#34;git-常用命令&#34;&gt;Git 常用命令&lt;/h3&gt;&#xA;&lt;p&gt;1.初始化仓库信息&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; git init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;增加文件信息到库&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; git add -A&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;提交代码&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; git commit -m &amp;#34;first commit&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;同步到远程库&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; git push -u origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;将远程库信息同步到本地&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; git clone http://192.168.100.226:3000/guoby/wzry.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;撤销提交操作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit --amend&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;重新更新git服务器信息&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote rm origin&#xA;git remote add origin http://192.168.100.201:3000/guoby/wzry.git&#xA;git push -u origin master&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Go Beego</title>
      <link>https://guobingyi.github.io/code/go-beego/</link>
      <pubDate>Fri, 14 Dec 2018 10:16:03 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/go-beego/</guid>
      <description>&lt;h2 id=&#34;beego-tutorial&#34;&gt;beego tutorial&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;无他， 但手熟尔。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;0x00-介绍&#34;&gt;0x00 介绍&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-beego-简介&#34;&gt;1. beego 简介&lt;/h4&gt;&#xA;&lt;p&gt;beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-beego-的架构&#34;&gt;2. beego 的架构&lt;/h4&gt;&#xA;&lt;p&gt;beego 是基于八大独立的模块构建的，是一个高度解耦的框架。当初设计 beego 的时候就是考虑功能模块化，用户即使不使用 beego 的 HTTP 逻辑，也依旧可以使用这些独立模块，例如：你可以使用 cache 模块来做你的缓存逻辑；使用日志模块来记录你的操作信息；使用 config 模块来解析你各种格式的文件。所以 beego 不仅可以用于 HTTP 类的应用开发，在你的 socket 游戏开发中也是很有用的模块，这也是 beego 为什么受欢迎的一个原因。大家如果玩过乐高的话，应该知道很多高级的东西都是一块一块的积木搭建出来的，而设计 beego 的时候，这些模块就是积木，高级机器人就是 beego。至于这些模块的功能以及如何使用会在后面的文档逐一介绍。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-beego-的执行逻辑&#34;&gt;3. beego 的执行逻辑&lt;/h4&gt;&#xA;&lt;p&gt;既然 beego 是基于这些模块构建的，那么它的执行逻辑是怎么样的呢？beego 是一个典型的 MVC 架构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Tutorial</title>
      <link>https://guobingyi.github.io/code/go-tutorial/</link>
      <pubDate>Thu, 13 Dec 2018 14:28:45 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/go-tutorial/</guid>
      <description>&lt;h2 id=&#34;go-tutorial&#34;&gt;Go Tutorial&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;学习一门语言最好的方式，就是熟读其文档。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;0x00-安装&#34;&gt;0x00 安装&lt;/h3&gt;&#xA;&lt;p&gt;安装go语言是件轻松的事情，如果安装都非常困难，那么还有什么好说的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;mac下安装&#34;&gt;Mac下安装&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install go &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;windows下安装&#34;&gt;Windows下安装&lt;/h4&gt;&#xA;&lt;p&gt;推荐使用MSI installer方式安装，一直Next下去就可以了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;0x01-helloworld&#34;&gt;0x01 Hello,world!&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;)&#xA;&#xA;// Print Hello,world!&#xA;func main() {&#xA;&#x9;fmt.Printf(&amp;#34;Hello,World!&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;0x01-文档查阅&#34;&gt;0x01 文档查阅&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;godoc -http=:6060&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;0x02-入门&#34;&gt;0x02 入门&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;文档介绍如何安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://localhost:6060/doc/install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;如何编写go语言&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://localhost:6060/doc/code.html&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Visual Studio Code</title>
      <link>https://guobingyi.github.io/code/vscode/</link>
      <pubDate>Fri, 24 Aug 2018 16:10:52 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/vscode/</guid>
      <description>&lt;h2 id=&#34;visual-studio-code-插件&#34;&gt;Visual Studio Code 插件&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;近来对Visual Studio Code的使用频率越来越高，也同时对微软出的这款免费IDE越来越喜欢。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;1settings-sync&#34;&gt;1.Settings Sync&lt;/h3&gt;&#xA;&lt;p&gt;对于使用不同电脑进行开发的人，最喜欢的就是同一个IDE，相同的配置。所以Settings Sync可以解决这个问题。详细的使用还是参考帮助文档，对了，前提是你得注册了一个github账号。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-project-manager&#34;&gt;2. Project Manager&lt;/h3&gt;&#xA;&lt;p&gt;其实这个功能就是为了在不同的项目中快速切换。恩，好用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-rest-client&#34;&gt;3. REST Client&lt;/h3&gt;&#xA;&lt;p&gt;REST 客户端允许你直接发送 HTTP 请求并在 Visual Studio Code 中查看响应。比PostMan简单，但是可以在IDE中直接使用也不错。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-todo-tree&#34;&gt;4. Todo Tree&lt;/h3&gt;&#xA;&lt;p&gt;写惯了TODO，用这个就可以由个想eclipse的效果，感觉还不错。&lt;/p&gt;&#xA;&lt;h3 id=&#34;5-night-owl&#34;&gt;5. Night Owl&lt;/h3&gt;&#xA;&lt;p&gt;晚上编码的时候可以用一下这个皮肤效果，不错。&lt;/p&gt;&#xA;&lt;h3 id=&#34;6-markdownlint&#34;&gt;6. markdownlint&lt;/h3&gt;&#xA;&lt;p&gt;使用hugo编写博客的时候，用到最多的插件，因为可以边写边看效果。&lt;/p&gt;&#xA;&lt;h3 id=&#34;7-gocrubypythoncc&#34;&gt;7. GO/C#/Ruby/Python/C/C++&lt;/h3&gt;&#xA;&lt;p&gt;语言插件，根据自己使用来进行安装，但是像我这样，什么都想弄一下的，都装了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;8-git-history&#34;&gt;8. Git History&lt;/h3&gt;&#xA;&lt;p&gt;git项目提交后，git历史信息。&lt;/p&gt;&#xA;&lt;h3 id=&#34;9gitlens&#34;&gt;9.GitLens&lt;/h3&gt;&#xA;&lt;p&gt;git项目提交信息和提交时间点信息。&lt;/p&gt;&#xA;&lt;h3 id=&#34;10-minify&#34;&gt;10. minify&lt;/h3&gt;&#xA;&lt;p&gt;将javascript文件变为min格式，好用。原来都是在eclipse中使用相应的插件，现在visual studio code 也有了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Others</title>
      <link>https://guobingyi.github.io/code/others/</link>
      <pubDate>Thu, 09 Aug 2018 11:39:34 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/others/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Don&amp;rsquo;t be evil&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;记录一些奇怪的错误&#34;&gt;记录一些奇怪的错误&lt;/h2&gt;&#xA;&lt;h3 id=&#34;0x00-swift控制端启动错误&#34;&gt;0x00 swift控制端启动错误&lt;/h3&gt;&#xA;&lt;p&gt;每次在控制台输入swift的时候，都会报这个错：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bingyideMacBook-Pro:~ guoby$ swift&#xA;Traceback (most recent call last):&#xA;  File &amp;#34;&amp;lt;input&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;&#xA;  File &amp;#34;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/copy.py&amp;#34;, line 52, in &amp;lt;module&amp;gt;&#xA;    import weakref&#xA;  File &amp;#34;/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/weakref.py&amp;#34;, line 14, in &amp;lt;module&amp;gt;&#xA;    from _weakref import (&#xA;ImportError: cannot import name _remove_dead_weakref&#xA;Welcome to Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2). Type :help for assistance.&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Test-driven development with Go</title>
      <link>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</link>
      <pubDate>Tue, 07 Aug 2018 17:48:14 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/test-drivendevelopmentwithgo/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;使用Go语言进行驱动开发。&lt;/p&gt;&#xA;&lt;h3 id=&#34;讲什么&#34;&gt;讲什么&lt;/h3&gt;&#xA;&lt;p&gt;本书将讲解如何使用一个在线服务创建二维码，仅仅使用Go自带的框架。&lt;/p&gt;&#xA;&lt;p&gt;二维条形码可以编写各种信息。许多智能手机都用扫描二维码的应用程序，你可能以前看见过，如果没有，下面就是典型的二维码信息：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://guobingyi.github.io/img/qrcode.png&#34; alt=&#34;qrcode&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;在本书的结尾将由一个完整的例子，使用http服务来创建二维码。在此过程中，你讲学习到Go语言的一些特性和其标准库用法以及测试驱动开发。&lt;/p&gt;&#xA;&lt;h3 id=&#34;预期读者&#34;&gt;预期读者&lt;/h3&gt;&#xA;&lt;p&gt;本书的读者需要有一定的编程基础，如果没有学习过Go,请点击&lt;a href=&#34;http://tour.golang.org/&#34;&gt;此处&lt;/a&gt;进行学习。&lt;/p&gt;&#xA;&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;&#xA;&lt;p&gt;在阅读本书前，你需要准备以下工具：&lt;/p&gt;&#xA;&lt;h4 id=&#34;go&#34;&gt;Go&lt;/h4&gt;&#xA;&lt;p&gt;Go语言环境是本书中的唯一要求。你可以从其官网进行下载安装。如果你的操作系统是OS X，可以使用Homebrew进行安装。&#xA;大多数的Linux都已经在包管理器中加入了Go。&lt;/p&gt;&#xA;&lt;h4 id=&#34;一个终端&#34;&gt;一个终端&lt;/h4&gt;&#xA;&lt;p&gt;使用Go语言的最佳途径就是使用终端。大多数的Linux系统使用其自动的终端shell，苹果用户可以使用Terminal.app；而&#xA;windows用户可以使用Cygwin或Git Bash。&lt;/p&gt;&#xA;&lt;h4 id=&#34;一个编辑器&#34;&gt;一个编辑器&lt;/h4&gt;&#xA;&lt;p&gt;最终，你将使用一个编辑器来进行编码。编辑器有非常多的选择，然而Sublime Text看起来非常流行。默认的&#xA;Go配置插件，Emasc和Vim都有提供。&lt;/p&gt;&#xA;&lt;p&gt;翻译者：推荐Visual Studio Code，好用，免费。&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码实例&#34;&gt;代码实例&lt;/h3&gt;&#xA;&lt;h4 id=&#34;go代码&#34;&gt;Go代码&lt;/h4&gt;&#xA;&lt;p&gt;本书包含大量代码示例。 Go代码是最突出的，这样的代码总是用文件名和行号注释; 这些数字不一定从1开始，但在写入时请参考文件中的位置。 每个片段都包含文件名作为其标题，通常后面跟着一些纯文本注释。&lt;/p&gt;&#xA;&lt;p&gt;fragment.go&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Receiver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MyFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt; &#x9;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Anything&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt; &#x9;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Even more&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Ruby</title>
      <link>https://guobingyi.github.io/code/ruby/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:56 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/ruby/</guid>
      <description>&lt;h2 id=&#34;ruby-学习笔记&#34;&gt;Ruby 学习笔记&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Go</title>
      <link>https://guobingyi.github.io/code/go/</link>
      <pubDate>Wed, 04 Jul 2018 23:21:20 +0800</pubDate>
      <guid>https://guobingyi.github.io/code/go/</guid>
      <description>&lt;h2 id=&#34;go语言学习笔记&#34;&gt;go语言学习笔记&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
